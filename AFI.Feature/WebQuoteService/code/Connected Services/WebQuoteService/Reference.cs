//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AFI.Feature.WebQuoteService.WebQuoteService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PROC_CNTC_DUPLICATE_SEL_NEW_Result", Namespace="http://schemas.datacontract.org/2004/07/WebConsole.DatabaseConnector.Entities")]
    [System.SerializableAttribute()]
    public partial class PROC_CNTC_DUPLICATE_SEL_NEW_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDR_CITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDR_LINE1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDR_LINE2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ADDR_POSTAL_CODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_STATE_ABREVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AFI_STATE_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CLIENT_TYPE_DESCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_BUSINESS_NAME1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_BUSINESS_NAME2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_BUSINESS_TAXIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CNTC_CONTACT_DOBField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_FIRST_NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CNTC_CONTACT_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_LAST_NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_MIDDLE_NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_NAME_SUFFIXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_CONTACT_SSNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CNTC_GROUP_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_LEGACY_NUMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_LEGACY_SUFFIXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CNTC_STAT_TYPE_DESCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CNTC_STAT_TYPE_IDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDR_CITY {
            get {
                return this.ADDR_CITYField;
            }
            set {
                if ((object.ReferenceEquals(this.ADDR_CITYField, value) != true)) {
                    this.ADDR_CITYField = value;
                    this.RaisePropertyChanged("ADDR_CITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDR_LINE1 {
            get {
                return this.ADDR_LINE1Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDR_LINE1Field, value) != true)) {
                    this.ADDR_LINE1Field = value;
                    this.RaisePropertyChanged("ADDR_LINE1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDR_LINE2 {
            get {
                return this.ADDR_LINE2Field;
            }
            set {
                if ((object.ReferenceEquals(this.ADDR_LINE2Field, value) != true)) {
                    this.ADDR_LINE2Field = value;
                    this.RaisePropertyChanged("ADDR_LINE2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ADDR_POSTAL_CODE {
            get {
                return this.ADDR_POSTAL_CODEField;
            }
            set {
                if ((object.ReferenceEquals(this.ADDR_POSTAL_CODEField, value) != true)) {
                    this.ADDR_POSTAL_CODEField = value;
                    this.RaisePropertyChanged("ADDR_POSTAL_CODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_STATE_ABREV {
            get {
                return this.AFI_STATE_ABREVField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_STATE_ABREVField, value) != true)) {
                    this.AFI_STATE_ABREVField = value;
                    this.RaisePropertyChanged("AFI_STATE_ABREV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AFI_STATE_ID {
            get {
                return this.AFI_STATE_IDField;
            }
            set {
                if ((this.AFI_STATE_IDField.Equals(value) != true)) {
                    this.AFI_STATE_IDField = value;
                    this.RaisePropertyChanged("AFI_STATE_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CLIENT_TYPE_DESC {
            get {
                return this.CNTC_CLIENT_TYPE_DESCField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CLIENT_TYPE_DESCField, value) != true)) {
                    this.CNTC_CLIENT_TYPE_DESCField = value;
                    this.RaisePropertyChanged("CNTC_CLIENT_TYPE_DESC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_BUSINESS_NAME1 {
            get {
                return this.CNTC_CONTACT_BUSINESS_NAME1Field;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_BUSINESS_NAME1Field, value) != true)) {
                    this.CNTC_CONTACT_BUSINESS_NAME1Field = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_BUSINESS_NAME1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_BUSINESS_NAME2 {
            get {
                return this.CNTC_CONTACT_BUSINESS_NAME2Field;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_BUSINESS_NAME2Field, value) != true)) {
                    this.CNTC_CONTACT_BUSINESS_NAME2Field = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_BUSINESS_NAME2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_BUSINESS_TAXID {
            get {
                return this.CNTC_CONTACT_BUSINESS_TAXIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_BUSINESS_TAXIDField, value) != true)) {
                    this.CNTC_CONTACT_BUSINESS_TAXIDField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_BUSINESS_TAXID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CNTC_CONTACT_DOB {
            get {
                return this.CNTC_CONTACT_DOBField;
            }
            set {
                if ((this.CNTC_CONTACT_DOBField.Equals(value) != true)) {
                    this.CNTC_CONTACT_DOBField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_DOB");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_FIRST_NAME {
            get {
                return this.CNTC_CONTACT_FIRST_NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_FIRST_NAMEField, value) != true)) {
                    this.CNTC_CONTACT_FIRST_NAMEField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_FIRST_NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CNTC_CONTACT_ID {
            get {
                return this.CNTC_CONTACT_IDField;
            }
            set {
                if ((this.CNTC_CONTACT_IDField.Equals(value) != true)) {
                    this.CNTC_CONTACT_IDField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_LAST_NAME {
            get {
                return this.CNTC_CONTACT_LAST_NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_LAST_NAMEField, value) != true)) {
                    this.CNTC_CONTACT_LAST_NAMEField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_LAST_NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_MIDDLE_NAME {
            get {
                return this.CNTC_CONTACT_MIDDLE_NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_MIDDLE_NAMEField, value) != true)) {
                    this.CNTC_CONTACT_MIDDLE_NAMEField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_MIDDLE_NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_NAME_SUFFIX {
            get {
                return this.CNTC_CONTACT_NAME_SUFFIXField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_NAME_SUFFIXField, value) != true)) {
                    this.CNTC_CONTACT_NAME_SUFFIXField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_NAME_SUFFIX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_CONTACT_SSN {
            get {
                return this.CNTC_CONTACT_SSNField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_CONTACT_SSNField, value) != true)) {
                    this.CNTC_CONTACT_SSNField = value;
                    this.RaisePropertyChanged("CNTC_CONTACT_SSN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CNTC_GROUP_ID {
            get {
                return this.CNTC_GROUP_IDField;
            }
            set {
                if ((this.CNTC_GROUP_IDField.Equals(value) != true)) {
                    this.CNTC_GROUP_IDField = value;
                    this.RaisePropertyChanged("CNTC_GROUP_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_LEGACY_NUM {
            get {
                return this.CNTC_LEGACY_NUMField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_LEGACY_NUMField, value) != true)) {
                    this.CNTC_LEGACY_NUMField = value;
                    this.RaisePropertyChanged("CNTC_LEGACY_NUM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_LEGACY_SUFFIX {
            get {
                return this.CNTC_LEGACY_SUFFIXField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_LEGACY_SUFFIXField, value) != true)) {
                    this.CNTC_LEGACY_SUFFIXField = value;
                    this.RaisePropertyChanged("CNTC_LEGACY_SUFFIX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNTC_STAT_TYPE_DESC {
            get {
                return this.CNTC_STAT_TYPE_DESCField;
            }
            set {
                if ((object.ReferenceEquals(this.CNTC_STAT_TYPE_DESCField, value) != true)) {
                    this.CNTC_STAT_TYPE_DESCField = value;
                    this.RaisePropertyChanged("CNTC_STAT_TYPE_DESC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CNTC_STAT_TYPE_ID {
            get {
                return this.CNTC_STAT_TYPE_IDField;
            }
            set {
                if ((this.CNTC_STAT_TYPE_IDField.Equals(value) != true)) {
                    this.CNTC_STAT_TYPE_IDField = value;
                    this.RaisePropertyChanged("CNTC_STAT_TYPE_ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateInfo", Namespace="http://schemas.datacontract.org/2004/07/WebConsole.Root.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class CertificateInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalInsuredCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalInsuredNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalInsuredStateAbrevField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalInsuredStreet1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalInsuredStreet2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdditionalInsuredZipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompOpAggAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompletionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DamageToPremisesAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateOfIssueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EachOccurrenceAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EffectiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenAggregateAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MedExpAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MemberNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersAdvInjuryAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PersonalPropertyLimitField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PolicyNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryCityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryStateAbrevField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryStreet1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryStreet2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrimaryZipField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TermDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalInsuredCity {
            get {
                return this.AdditionalInsuredCityField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalInsuredCityField, value) != true)) {
                    this.AdditionalInsuredCityField = value;
                    this.RaisePropertyChanged("AdditionalInsuredCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalInsuredName {
            get {
                return this.AdditionalInsuredNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalInsuredNameField, value) != true)) {
                    this.AdditionalInsuredNameField = value;
                    this.RaisePropertyChanged("AdditionalInsuredName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalInsuredStateAbrev {
            get {
                return this.AdditionalInsuredStateAbrevField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalInsuredStateAbrevField, value) != true)) {
                    this.AdditionalInsuredStateAbrevField = value;
                    this.RaisePropertyChanged("AdditionalInsuredStateAbrev");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalInsuredStreet1 {
            get {
                return this.AdditionalInsuredStreet1Field;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalInsuredStreet1Field, value) != true)) {
                    this.AdditionalInsuredStreet1Field = value;
                    this.RaisePropertyChanged("AdditionalInsuredStreet1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalInsuredStreet2 {
            get {
                return this.AdditionalInsuredStreet2Field;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalInsuredStreet2Field, value) != true)) {
                    this.AdditionalInsuredStreet2Field = value;
                    this.RaisePropertyChanged("AdditionalInsuredStreet2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdditionalInsuredZip {
            get {
                return this.AdditionalInsuredZipField;
            }
            set {
                if ((object.ReferenceEquals(this.AdditionalInsuredZipField, value) != true)) {
                    this.AdditionalInsuredZipField = value;
                    this.RaisePropertyChanged("AdditionalInsuredZip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompOpAggAmount {
            get {
                return this.CompOpAggAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.CompOpAggAmountField, value) != true)) {
                    this.CompOpAggAmountField = value;
                    this.RaisePropertyChanged("CompOpAggAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompletionDate {
            get {
                return this.CompletionDateField;
            }
            set {
                if ((object.ReferenceEquals(this.CompletionDateField, value) != true)) {
                    this.CompletionDateField = value;
                    this.RaisePropertyChanged("CompletionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DamageToPremisesAmount {
            get {
                return this.DamageToPremisesAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.DamageToPremisesAmountField, value) != true)) {
                    this.DamageToPremisesAmountField = value;
                    this.RaisePropertyChanged("DamageToPremisesAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateOfIssue {
            get {
                return this.DateOfIssueField;
            }
            set {
                if ((object.ReferenceEquals(this.DateOfIssueField, value) != true)) {
                    this.DateOfIssueField = value;
                    this.RaisePropertyChanged("DateOfIssue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EachOccurrenceAmount {
            get {
                return this.EachOccurrenceAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.EachOccurrenceAmountField, value) != true)) {
                    this.EachOccurrenceAmountField = value;
                    this.RaisePropertyChanged("EachOccurrenceAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EffectiveDate {
            get {
                return this.EffectiveDateField;
            }
            set {
                if ((object.ReferenceEquals(this.EffectiveDateField, value) != true)) {
                    this.EffectiveDateField = value;
                    this.RaisePropertyChanged("EffectiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenAggregateAmount {
            get {
                return this.GenAggregateAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.GenAggregateAmountField, value) != true)) {
                    this.GenAggregateAmountField = value;
                    this.RaisePropertyChanged("GenAggregateAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MedExpAmount {
            get {
                return this.MedExpAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.MedExpAmountField, value) != true)) {
                    this.MedExpAmountField = value;
                    this.RaisePropertyChanged("MedExpAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MemberNumber {
            get {
                return this.MemberNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.MemberNumberField, value) != true)) {
                    this.MemberNumberField = value;
                    this.RaisePropertyChanged("MemberNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersAdvInjuryAmount {
            get {
                return this.PersAdvInjuryAmountField;
            }
            set {
                if ((object.ReferenceEquals(this.PersAdvInjuryAmountField, value) != true)) {
                    this.PersAdvInjuryAmountField = value;
                    this.RaisePropertyChanged("PersAdvInjuryAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersonalPropertyLimit {
            get {
                return this.PersonalPropertyLimitField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonalPropertyLimitField, value) != true)) {
                    this.PersonalPropertyLimitField = value;
                    this.RaisePropertyChanged("PersonalPropertyLimit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PolicyNumber {
            get {
                return this.PolicyNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PolicyNumberField, value) != true)) {
                    this.PolicyNumberField = value;
                    this.RaisePropertyChanged("PolicyNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryCity {
            get {
                return this.PrimaryCityField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryCityField, value) != true)) {
                    this.PrimaryCityField = value;
                    this.RaisePropertyChanged("PrimaryCity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryName {
            get {
                return this.PrimaryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryNameField, value) != true)) {
                    this.PrimaryNameField = value;
                    this.RaisePropertyChanged("PrimaryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryStateAbrev {
            get {
                return this.PrimaryStateAbrevField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryStateAbrevField, value) != true)) {
                    this.PrimaryStateAbrevField = value;
                    this.RaisePropertyChanged("PrimaryStateAbrev");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryStreet1 {
            get {
                return this.PrimaryStreet1Field;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryStreet1Field, value) != true)) {
                    this.PrimaryStreet1Field = value;
                    this.RaisePropertyChanged("PrimaryStreet1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryStreet2 {
            get {
                return this.PrimaryStreet2Field;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryStreet2Field, value) != true)) {
                    this.PrimaryStreet2Field = value;
                    this.RaisePropertyChanged("PrimaryStreet2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrimaryZip {
            get {
                return this.PrimaryZipField;
            }
            set {
                if ((object.ReferenceEquals(this.PrimaryZipField, value) != true)) {
                    this.PrimaryZipField = value;
                    this.RaisePropertyChanged("PrimaryZip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TermDate {
            get {
                return this.TermDateField;
            }
            set {
                if ((object.ReferenceEquals(this.TermDateField, value) != true)) {
                    this.TermDateField = value;
                    this.RaisePropertyChanged("TermDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CertificateReturn", Namespace="http://schemas.datacontract.org/2004/07/WebConsole.Root.Services.DTO")]
    [System.SerializableAttribute()]
    public partial class CertificateReturn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] FileDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] FileData {
            get {
                return this.FileDataField;
            }
            set {
                if ((object.ReferenceEquals(this.FileDataField, value) != true)) {
                    this.FileDataField = value;
                    this.RaisePropertyChanged("FileData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateType", Namespace="http://schemas.datacontract.org/2004/07/WebConsole.Root.Services.DTO")]
    public enum UpdateType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SSN = 0,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PROC_GET_PARTNER_EMPLOYEES_FOR_WEB_Result", Namespace="http://schemas.datacontract.org/2004/07/WebConsole.DatabaseConnector.Entities")]
    [System.SerializableAttribute()]
    public partial class PROC_GET_PARTNER_EMPLOYEES_FOR_WEB_Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_ADDRESS_1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_ADDRESS_2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_CITYField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_CODEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> AFI_PARTNER_EMPLOYEE_EFF_DATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_EMAILField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_FAXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_FIRST_NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AFI_PARTNER_EMPLOYEE_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_LAST_NAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_MIDDLE_INITIALField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_PHONEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_PHONE_EXTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_STATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> AFI_PARTNER_EMPLOYEE_TERM_DATEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AFI_PARTNER_EMPLOYEE_ZIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AFI_PARTNER_LIST_IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SelectOptionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_ADDRESS_1 {
            get {
                return this.AFI_PARTNER_EMPLOYEE_ADDRESS_1Field;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_ADDRESS_1Field, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_ADDRESS_1Field = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_ADDRESS_1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_ADDRESS_2 {
            get {
                return this.AFI_PARTNER_EMPLOYEE_ADDRESS_2Field;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_ADDRESS_2Field, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_ADDRESS_2Field = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_ADDRESS_2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_CITY {
            get {
                return this.AFI_PARTNER_EMPLOYEE_CITYField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_CITYField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_CITYField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_CITY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_CODE {
            get {
                return this.AFI_PARTNER_EMPLOYEE_CODEField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_CODEField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_CODEField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_CODE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> AFI_PARTNER_EMPLOYEE_EFF_DATE {
            get {
                return this.AFI_PARTNER_EMPLOYEE_EFF_DATEField;
            }
            set {
                if ((this.AFI_PARTNER_EMPLOYEE_EFF_DATEField.Equals(value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_EFF_DATEField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_EFF_DATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_EMAIL {
            get {
                return this.AFI_PARTNER_EMPLOYEE_EMAILField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_EMAILField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_EMAILField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_EMAIL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_FAX {
            get {
                return this.AFI_PARTNER_EMPLOYEE_FAXField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_FAXField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_FAXField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_FAX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_FIRST_NAME {
            get {
                return this.AFI_PARTNER_EMPLOYEE_FIRST_NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_FIRST_NAMEField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_FIRST_NAMEField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_FIRST_NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AFI_PARTNER_EMPLOYEE_ID {
            get {
                return this.AFI_PARTNER_EMPLOYEE_IDField;
            }
            set {
                if ((this.AFI_PARTNER_EMPLOYEE_IDField.Equals(value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_IDField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_LAST_NAME {
            get {
                return this.AFI_PARTNER_EMPLOYEE_LAST_NAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_LAST_NAMEField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_LAST_NAMEField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_LAST_NAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_MIDDLE_INITIAL {
            get {
                return this.AFI_PARTNER_EMPLOYEE_MIDDLE_INITIALField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_MIDDLE_INITIALField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_MIDDLE_INITIALField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_MIDDLE_INITIAL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_PHONE {
            get {
                return this.AFI_PARTNER_EMPLOYEE_PHONEField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_PHONEField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_PHONEField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_PHONE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_PHONE_EXT {
            get {
                return this.AFI_PARTNER_EMPLOYEE_PHONE_EXTField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_PHONE_EXTField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_PHONE_EXTField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_PHONE_EXT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_STATE {
            get {
                return this.AFI_PARTNER_EMPLOYEE_STATEField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_STATEField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_STATEField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_STATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> AFI_PARTNER_EMPLOYEE_TERM_DATE {
            get {
                return this.AFI_PARTNER_EMPLOYEE_TERM_DATEField;
            }
            set {
                if ((this.AFI_PARTNER_EMPLOYEE_TERM_DATEField.Equals(value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_TERM_DATEField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_TERM_DATE");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AFI_PARTNER_EMPLOYEE_ZIP {
            get {
                return this.AFI_PARTNER_EMPLOYEE_ZIPField;
            }
            set {
                if ((object.ReferenceEquals(this.AFI_PARTNER_EMPLOYEE_ZIPField, value) != true)) {
                    this.AFI_PARTNER_EMPLOYEE_ZIPField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_EMPLOYEE_ZIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AFI_PARTNER_LIST_ID {
            get {
                return this.AFI_PARTNER_LIST_IDField;
            }
            set {
                if ((this.AFI_PARTNER_LIST_IDField.Equals(value) != true)) {
                    this.AFI_PARTNER_LIST_IDField = value;
                    this.RaisePropertyChanged("AFI_PARTNER_LIST_ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SelectOptions {
            get {
                return this.SelectOptionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SelectOptionsField, value) != true)) {
                    this.SelectOptionsField = value;
                    this.RaisePropertyChanged("SelectOptions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebQuoteService.IWebQuoteService")]
    public interface IWebQuoteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteToMFAndReturnPremimum", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteToMFAndReturnPremimumResponse")]
        string SendQuoteToMFAndReturnPremimum(string QuoteInfo, string ContactInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteToMFAndReturnPremimum", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteToMFAndReturnPremimumResponse")]
        System.Threading.Tasks.Task<string> SendQuoteToMFAndReturnPremimumAsync(string QuoteInfo, string ContactInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteContactToClientAndMF", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteContactToClientAndMFResponse")]
        string SendQuoteContactToClientAndMF(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteContactToClientAndMF", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteContactToClientAndMFResponse")]
        System.Threading.Tasks.Task<string> SendQuoteContactToClientAndMFAsync(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/UpdateMktgSource", ReplyAction="http://tempuri.org/IWebQuoteService/UpdateMktgSourceResponse")]
        void UpdateMktgSource(int memberNumber, string MarketingSource, int QuoteKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/UpdateMktgSource", ReplyAction="http://tempuri.org/IWebQuoteService/UpdateMktgSourceResponse")]
        System.Threading.Tasks.Task UpdateMktgSourceAsync(int memberNumber, string MarketingSource, int QuoteKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/RepushToMF", ReplyAction="http://tempuri.org/IWebQuoteService/RepushToMFResponse")]
        bool RepushToMF(int MemberNumber, int QuoteKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/RepushToMF", ReplyAction="http://tempuri.org/IWebQuoteService/RepushToMFResponse")]
        System.Threading.Tasks.Task<bool> RepushToMFAsync(int MemberNumber, int QuoteKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/PushToIssueMF", ReplyAction="http://tempuri.org/IWebQuoteService/PushToIssueMFResponse")]
        string PushToIssueMF(int MemberNumber, int QuoteKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/PushToIssueMF", ReplyAction="http://tempuri.org/IWebQuoteService/PushToIssueMFResponse")]
        System.Threading.Tasks.Task<string> PushToIssueMFAsync(int MemberNumber, int QuoteKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteInfoByFileName", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteInfoByFileNameResponse")]
        void SendQuoteInfoByFileName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteInfoByFileName", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteInfoByFileNameResponse")]
        System.Threading.Tasks.Task SendQuoteInfoByFileNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteContactByFileName", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteContactByFileNameResponse")]
        void SendQuoteContactByFileName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteContactByFileName", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteContactByFileNameResponse")]
        System.Threading.Tasks.Task SendQuoteContactByFileNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteToEpicResponse")]
        void SendQuoteToEpic(int QuoteId, string CoverageType, int memberNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteToEpicResponse")]
        System.Threading.Tasks.Task SendQuoteToEpicAsync(int QuoteId, string CoverageType, int memberNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteHubToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteHubToEpicResponse")]
        int SendQuoteHubToEpic(string LOB, string FullQuoteNumber, int memberNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteHubToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteHubToEpicResponse")]
        System.Threading.Tasks.Task<int> SendQuoteHubToEpicAsync(string LOB, string FullQuoteNumber, int memberNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/ResendQuoteHubToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/ResendQuoteHubToEpicResponse")]
        int ResendQuoteHubToEpic(string LOB, string FullQuoteNumber, int memberNumber, int epicPolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/ResendQuoteHubToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/ResendQuoteHubToEpicResponse")]
        System.Threading.Tasks.Task<int> ResendQuoteHubToEpicAsync(string LOB, string FullQuoteNumber, int memberNumber, int epicPolId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CreateMemberForQuote", ReplyAction="http://tempuri.org/IWebQuoteService/CreateMemberForQuoteResponse")]
        void CreateMemberForQuote(int QuoteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CreateMemberForQuote", ReplyAction="http://tempuri.org/IWebQuoteService/CreateMemberForQuoteResponse")]
        System.Threading.Tasks.Task CreateMemberForQuoteAsync(int QuoteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteInfoLogId", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteInfoLogIdResponse")]
        string SendQuoteInfoLogId(int quoteid, int contid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteInfoLogId", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteInfoLogIdResponse")]
        System.Threading.Tasks.Task<string> SendQuoteInfoLogIdAsync(int quoteid, int contid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteContactByLogId", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteContactByLogIdResponse")]
        string SendQuoteContactByLogId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteContactByLogId", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteContactByLogIdResponse")]
        System.Threading.Tasks.Task<string> SendQuoteContactByLogIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteActivityToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteActivityToEpicResponse")]
        void SendQuoteActivityToEpic(string State, string LOB, int memberNumber, bool IsComplete, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendQuoteActivityToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendQuoteActivityToEpicResponse")]
        System.Threading.Tasks.Task SendQuoteActivityToEpicAsync(string State, string LOB, int memberNumber, bool IsComplete, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendMiscActivityToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendMiscActivityToEpicResponse")]
        void SendMiscActivityToEpic(int memberNumber, string Description, string ActivityCode, string Note, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SendMiscActivityToEpic", ReplyAction="http://tempuri.org/IWebQuoteService/SendMiscActivityToEpicResponse")]
        System.Threading.Tasks.Task SendMiscActivityToEpicAsync(int memberNumber, string Description, string ActivityCode, string Note, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CreatePayor", ReplyAction="http://tempuri.org/IWebQuoteService/CreatePayorResponse")]
        int CreatePayor(int memebrNumber, int PaymentDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CreatePayor", ReplyAction="http://tempuri.org/IWebQuoteService/CreatePayorResponse")]
        System.Threading.Tasks.Task<int> CreatePayorAsync(int memebrNumber, int PaymentDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SearchForDuplicatesByLogId", ReplyAction="http://tempuri.org/IWebQuoteService/SearchForDuplicatesByLogIdResponse")]
        AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[] SearchForDuplicatesByLogId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SearchForDuplicatesByLogId", ReplyAction="http://tempuri.org/IWebQuoteService/SearchForDuplicatesByLogIdResponse")]
        System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[]> SearchForDuplicatesByLogIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SearchForDuplicates", ReplyAction="http://tempuri.org/IWebQuoteService/SearchForDuplicatesResponse")]
        AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[] SearchForDuplicates(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/SearchForDuplicates", ReplyAction="http://tempuri.org/IWebQuoteService/SearchForDuplicatesResponse")]
        System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[]> SearchForDuplicatesAsync(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CreateProofOfInsurance", ReplyAction="http://tempuri.org/IWebQuoteService/CreateProofOfInsuranceResponse")]
        AFI.Feature.WebQuoteService.WebQuoteService.CertificateReturn CreateProofOfInsurance(AFI.Feature.WebQuoteService.WebQuoteService.CertificateInfo CertInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CreateProofOfInsurance", ReplyAction="http://tempuri.org/IWebQuoteService/CreateProofOfInsuranceResponse")]
        System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.CertificateReturn> CreateProofOfInsuranceAsync(AFI.Feature.WebQuoteService.WebQuoteService.CertificateInfo CertInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/UpdateIndividualContactInfo", ReplyAction="http://tempuri.org/IWebQuoteService/UpdateIndividualContactInfoResponse")]
        void UpdateIndividualContactInfo(AFI.Feature.WebQuoteService.WebQuoteService.UpdateType type, string data, int CntcGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/UpdateIndividualContactInfo", ReplyAction="http://tempuri.org/IWebQuoteService/UpdateIndividualContactInfoResponse")]
        System.Threading.Tasks.Task UpdateIndividualContactInfoAsync(AFI.Feature.WebQuoteService.WebQuoteService.UpdateType type, string data, int CntcGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/GetPartnerEmployeeList", ReplyAction="http://tempuri.org/IWebQuoteService/GetPartnerEmployeeListResponse")]
        AFI.Feature.WebQuoteService.WebQuoteService.PROC_GET_PARTNER_EMPLOYEES_FOR_WEB_Result[] GetPartnerEmployeeList(int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/GetPartnerEmployeeList", ReplyAction="http://tempuri.org/IWebQuoteService/GetPartnerEmployeeListResponse")]
        System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.PROC_GET_PARTNER_EMPLOYEES_FOR_WEB_Result[]> GetPartnerEmployeeListAsync(int partnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CalculateRentersPremium", ReplyAction="http://tempuri.org/IWebQuoteService/CalculateRentersPremiumResponse")]
        System.Collections.Generic.Dictionary<string, string> CalculateRentersPremium(string state, string eligibility, string PersonalProperty, string DeductibleRequested, string responseCode, string CoverageState, bool ComprehensiveCoverage, bool ReplacementCostCoverage, bool IdentityFraudExpenseCoverage, bool AdditionalCoverage, bool BusinessPropertyCoverage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/CalculateRentersPremium", ReplyAction="http://tempuri.org/IWebQuoteService/CalculateRentersPremiumResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> CalculateRentersPremiumAsync(string state, string eligibility, string PersonalProperty, string DeductibleRequested, string responseCode, string CoverageState, bool ComprehensiveCoverage, bool ReplacementCostCoverage, bool IdentityFraudExpenseCoverage, bool AdditionalCoverage, bool BusinessPropertyCoverage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/QuoteIsDuplicate", ReplyAction="http://tempuri.org/IWebQuoteService/QuoteIsDuplicateResponse")]
        bool QuoteIsDuplicate(int key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/QuoteIsDuplicate", ReplyAction="http://tempuri.org/IWebQuoteService/QuoteIsDuplicateResponse")]
        System.Threading.Tasks.Task<bool> QuoteIsDuplicateAsync(int key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/InsertAfiForm", ReplyAction="http://tempuri.org/IWebQuoteService/InsertAfiFormResponse")]
        void InsertAfiForm(
                    System.Nullable<int> CNTCGroupID, 
                    string QuoteID, 
                    int Priority, 
                    string StateAbbrv, 
                    bool Expidite, 
                    string DisplayInformation, 
                    System.DateTime CreatedDate, 
                    System.DateTime UpdatedDate, 
                    string creationUser, 
                    string UpdateUser, 
                    string Email, 
                    string Eligibility, 
                    bool CallForReview, 
                    bool CurrentlyAutoInsured, 
                    bool IsFirstCommand, 
                    bool RecievedPremium, 
                    bool IsFinished, 
                    bool IsMobileManufactured, 
                    bool IsSlt, 
                    bool IsRental, 
                    bool IsBusinessTest, 
                    bool IsTest, 
                    bool NeedsUnderwriting, 
                    bool IssuedOnline, 
                    bool ApplicationCompleted, 
                    bool IsInterested, 
                    bool IsCondo, 
                    bool IsVacant, 
                    int FormTypeID, 
                    int CoverageTypeID, 
                    string address1, 
                    string City, 
                    bool IsPossibleDup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWebQuoteService/InsertAfiForm", ReplyAction="http://tempuri.org/IWebQuoteService/InsertAfiFormResponse")]
        System.Threading.Tasks.Task InsertAfiFormAsync(
                    System.Nullable<int> CNTCGroupID, 
                    string QuoteID, 
                    int Priority, 
                    string StateAbbrv, 
                    bool Expidite, 
                    string DisplayInformation, 
                    System.DateTime CreatedDate, 
                    System.DateTime UpdatedDate, 
                    string creationUser, 
                    string UpdateUser, 
                    string Email, 
                    string Eligibility, 
                    bool CallForReview, 
                    bool CurrentlyAutoInsured, 
                    bool IsFirstCommand, 
                    bool RecievedPremium, 
                    bool IsFinished, 
                    bool IsMobileManufactured, 
                    bool IsSlt, 
                    bool IsRental, 
                    bool IsBusinessTest, 
                    bool IsTest, 
                    bool NeedsUnderwriting, 
                    bool IssuedOnline, 
                    bool ApplicationCompleted, 
                    bool IsInterested, 
                    bool IsCondo, 
                    bool IsVacant, 
                    int FormTypeID, 
                    int CoverageTypeID, 
                    string address1, 
                    string City, 
                    bool IsPossibleDup);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWebQuoteServiceChannel : AFI.Feature.WebQuoteService.WebQuoteService.IWebQuoteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WebQuoteServiceClient : System.ServiceModel.ClientBase<AFI.Feature.WebQuoteService.WebQuoteService.IWebQuoteService>, AFI.Feature.WebQuoteService.WebQuoteService.IWebQuoteService {
        
        public WebQuoteServiceClient() {
        }
        
        public WebQuoteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WebQuoteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebQuoteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WebQuoteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string SendQuoteToMFAndReturnPremimum(string QuoteInfo, string ContactInfo) {
            return base.Channel.SendQuoteToMFAndReturnPremimum(QuoteInfo, ContactInfo);
        }
        
        public System.Threading.Tasks.Task<string> SendQuoteToMFAndReturnPremimumAsync(string QuoteInfo, string ContactInfo) {
            return base.Channel.SendQuoteToMFAndReturnPremimumAsync(QuoteInfo, ContactInfo);
        }
        
        public string SendQuoteContactToClientAndMF(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest) {
            return base.Channel.SendQuoteContactToClientAndMF(ContactInfo, QuoteKey, PushMainframe, IsTest);
        }
        
        public System.Threading.Tasks.Task<string> SendQuoteContactToClientAndMFAsync(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest) {
            return base.Channel.SendQuoteContactToClientAndMFAsync(ContactInfo, QuoteKey, PushMainframe, IsTest);
        }
        
        public void UpdateMktgSource(int memberNumber, string MarketingSource, int QuoteKey) {
            base.Channel.UpdateMktgSource(memberNumber, MarketingSource, QuoteKey);
        }
        
        public System.Threading.Tasks.Task UpdateMktgSourceAsync(int memberNumber, string MarketingSource, int QuoteKey) {
            return base.Channel.UpdateMktgSourceAsync(memberNumber, MarketingSource, QuoteKey);
        }
        
        public bool RepushToMF(int MemberNumber, int QuoteKey) {
            return base.Channel.RepushToMF(MemberNumber, QuoteKey);
        }
        
        public System.Threading.Tasks.Task<bool> RepushToMFAsync(int MemberNumber, int QuoteKey) {
            return base.Channel.RepushToMFAsync(MemberNumber, QuoteKey);
        }
        
        public string PushToIssueMF(int MemberNumber, int QuoteKey) {
            return base.Channel.PushToIssueMF(MemberNumber, QuoteKey);
        }
        
        public System.Threading.Tasks.Task<string> PushToIssueMFAsync(int MemberNumber, int QuoteKey) {
            return base.Channel.PushToIssueMFAsync(MemberNumber, QuoteKey);
        }
        
        public void SendQuoteInfoByFileName() {
            base.Channel.SendQuoteInfoByFileName();
        }
        
        public System.Threading.Tasks.Task SendQuoteInfoByFileNameAsync() {
            return base.Channel.SendQuoteInfoByFileNameAsync();
        }
        
        public void SendQuoteContactByFileName() {
            base.Channel.SendQuoteContactByFileName();
        }
        
        public System.Threading.Tasks.Task SendQuoteContactByFileNameAsync() {
            return base.Channel.SendQuoteContactByFileNameAsync();
        }
        
        public void SendQuoteToEpic(int QuoteId, string CoverageType, int memberNumber) {
            base.Channel.SendQuoteToEpic(QuoteId, CoverageType, memberNumber);
        }
        
        public System.Threading.Tasks.Task SendQuoteToEpicAsync(int QuoteId, string CoverageType, int memberNumber) {
            return base.Channel.SendQuoteToEpicAsync(QuoteId, CoverageType, memberNumber);
        }
        
        public int SendQuoteHubToEpic(string LOB, string FullQuoteNumber, int memberNumber) {
            return base.Channel.SendQuoteHubToEpic(LOB, FullQuoteNumber, memberNumber);
        }
        
        public System.Threading.Tasks.Task<int> SendQuoteHubToEpicAsync(string LOB, string FullQuoteNumber, int memberNumber) {
            return base.Channel.SendQuoteHubToEpicAsync(LOB, FullQuoteNumber, memberNumber);
        }
        
        public int ResendQuoteHubToEpic(string LOB, string FullQuoteNumber, int memberNumber, int epicPolId) {
            return base.Channel.ResendQuoteHubToEpic(LOB, FullQuoteNumber, memberNumber, epicPolId);
        }
        
        public System.Threading.Tasks.Task<int> ResendQuoteHubToEpicAsync(string LOB, string FullQuoteNumber, int memberNumber, int epicPolId) {
            return base.Channel.ResendQuoteHubToEpicAsync(LOB, FullQuoteNumber, memberNumber, epicPolId);
        }
        
        public void CreateMemberForQuote(int QuoteId) {
            base.Channel.CreateMemberForQuote(QuoteId);
        }
        
        public System.Threading.Tasks.Task CreateMemberForQuoteAsync(int QuoteId) {
            return base.Channel.CreateMemberForQuoteAsync(QuoteId);
        }
        
        public string SendQuoteInfoLogId(int quoteid, int contid) {
            return base.Channel.SendQuoteInfoLogId(quoteid, contid);
        }
        
        public System.Threading.Tasks.Task<string> SendQuoteInfoLogIdAsync(int quoteid, int contid) {
            return base.Channel.SendQuoteInfoLogIdAsync(quoteid, contid);
        }
        
        public string SendQuoteContactByLogId(int id) {
            return base.Channel.SendQuoteContactByLogId(id);
        }
        
        public System.Threading.Tasks.Task<string> SendQuoteContactByLogIdAsync(int id) {
            return base.Channel.SendQuoteContactByLogIdAsync(id);
        }
        
        public void SendQuoteActivityToEpic(string State, string LOB, int memberNumber, bool IsComplete, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup) {
            base.Channel.SendQuoteActivityToEpic(State, LOB, memberNumber, IsComplete, StartedDate, FinishedDate, IsPossibleDup);
        }
        
        public System.Threading.Tasks.Task SendQuoteActivityToEpicAsync(string State, string LOB, int memberNumber, bool IsComplete, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup) {
            return base.Channel.SendQuoteActivityToEpicAsync(State, LOB, memberNumber, IsComplete, StartedDate, FinishedDate, IsPossibleDup);
        }
        
        public void SendMiscActivityToEpic(int memberNumber, string Description, string ActivityCode, string Note, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup) {
            base.Channel.SendMiscActivityToEpic(memberNumber, Description, ActivityCode, Note, StartedDate, FinishedDate, IsPossibleDup);
        }
        
        public System.Threading.Tasks.Task SendMiscActivityToEpicAsync(int memberNumber, string Description, string ActivityCode, string Note, System.DateTime StartedDate, System.DateTime FinishedDate, bool IsPossibleDup) {
            return base.Channel.SendMiscActivityToEpicAsync(memberNumber, Description, ActivityCode, Note, StartedDate, FinishedDate, IsPossibleDup);
        }
        
        public int CreatePayor(int memebrNumber, int PaymentDay) {
            return base.Channel.CreatePayor(memebrNumber, PaymentDay);
        }
        
        public System.Threading.Tasks.Task<int> CreatePayorAsync(int memebrNumber, int PaymentDay) {
            return base.Channel.CreatePayorAsync(memebrNumber, PaymentDay);
        }
        
        public AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[] SearchForDuplicatesByLogId(int id) {
            return base.Channel.SearchForDuplicatesByLogId(id);
        }
        
        public System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[]> SearchForDuplicatesByLogIdAsync(int id) {
            return base.Channel.SearchForDuplicatesByLogIdAsync(id);
        }
        
        public AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[] SearchForDuplicates(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest) {
            return base.Channel.SearchForDuplicates(ContactInfo, QuoteKey, PushMainframe, IsTest);
        }
        
        public System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.PROC_CNTC_DUPLICATE_SEL_NEW_Result[]> SearchForDuplicatesAsync(string ContactInfo, int QuoteKey, bool PushMainframe, bool IsTest) {
            return base.Channel.SearchForDuplicatesAsync(ContactInfo, QuoteKey, PushMainframe, IsTest);
        }
        
        public AFI.Feature.WebQuoteService.WebQuoteService.CertificateReturn CreateProofOfInsurance(AFI.Feature.WebQuoteService.WebQuoteService.CertificateInfo CertInfo) {
            return base.Channel.CreateProofOfInsurance(CertInfo);
        }
        
        public System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.CertificateReturn> CreateProofOfInsuranceAsync(AFI.Feature.WebQuoteService.WebQuoteService.CertificateInfo CertInfo) {
            return base.Channel.CreateProofOfInsuranceAsync(CertInfo);
        }
        
        public void UpdateIndividualContactInfo(AFI.Feature.WebQuoteService.WebQuoteService.UpdateType type, string data, int CntcGroupId) {
            base.Channel.UpdateIndividualContactInfo(type, data, CntcGroupId);
        }
        
        public System.Threading.Tasks.Task UpdateIndividualContactInfoAsync(AFI.Feature.WebQuoteService.WebQuoteService.UpdateType type, string data, int CntcGroupId) {
            return base.Channel.UpdateIndividualContactInfoAsync(type, data, CntcGroupId);
        }
        
        public AFI.Feature.WebQuoteService.WebQuoteService.PROC_GET_PARTNER_EMPLOYEES_FOR_WEB_Result[] GetPartnerEmployeeList(int partnerId) {
            return base.Channel.GetPartnerEmployeeList(partnerId);
        }
        
        public System.Threading.Tasks.Task<AFI.Feature.WebQuoteService.WebQuoteService.PROC_GET_PARTNER_EMPLOYEES_FOR_WEB_Result[]> GetPartnerEmployeeListAsync(int partnerId) {
            return base.Channel.GetPartnerEmployeeListAsync(partnerId);
        }
        
        public System.Collections.Generic.Dictionary<string, string> CalculateRentersPremium(string state, string eligibility, string PersonalProperty, string DeductibleRequested, string responseCode, string CoverageState, bool ComprehensiveCoverage, bool ReplacementCostCoverage, bool IdentityFraudExpenseCoverage, bool AdditionalCoverage, bool BusinessPropertyCoverage) {
            return base.Channel.CalculateRentersPremium(state, eligibility, PersonalProperty, DeductibleRequested, responseCode, CoverageState, ComprehensiveCoverage, ReplacementCostCoverage, IdentityFraudExpenseCoverage, AdditionalCoverage, BusinessPropertyCoverage);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> CalculateRentersPremiumAsync(string state, string eligibility, string PersonalProperty, string DeductibleRequested, string responseCode, string CoverageState, bool ComprehensiveCoverage, bool ReplacementCostCoverage, bool IdentityFraudExpenseCoverage, bool AdditionalCoverage, bool BusinessPropertyCoverage) {
            return base.Channel.CalculateRentersPremiumAsync(state, eligibility, PersonalProperty, DeductibleRequested, responseCode, CoverageState, ComprehensiveCoverage, ReplacementCostCoverage, IdentityFraudExpenseCoverage, AdditionalCoverage, BusinessPropertyCoverage);
        }
        
        public bool QuoteIsDuplicate(int key) {
            return base.Channel.QuoteIsDuplicate(key);
        }
        
        public System.Threading.Tasks.Task<bool> QuoteIsDuplicateAsync(int key) {
            return base.Channel.QuoteIsDuplicateAsync(key);
        }
        
        public void InsertAfiForm(
                    System.Nullable<int> CNTCGroupID, 
                    string QuoteID, 
                    int Priority, 
                    string StateAbbrv, 
                    bool Expidite, 
                    string DisplayInformation, 
                    System.DateTime CreatedDate, 
                    System.DateTime UpdatedDate, 
                    string creationUser, 
                    string UpdateUser, 
                    string Email, 
                    string Eligibility, 
                    bool CallForReview, 
                    bool CurrentlyAutoInsured, 
                    bool IsFirstCommand, 
                    bool RecievedPremium, 
                    bool IsFinished, 
                    bool IsMobileManufactured, 
                    bool IsSlt, 
                    bool IsRental, 
                    bool IsBusinessTest, 
                    bool IsTest, 
                    bool NeedsUnderwriting, 
                    bool IssuedOnline, 
                    bool ApplicationCompleted, 
                    bool IsInterested, 
                    bool IsCondo, 
                    bool IsVacant, 
                    int FormTypeID, 
                    int CoverageTypeID, 
                    string address1, 
                    string City, 
                    bool IsPossibleDup) {
            base.Channel.InsertAfiForm(CNTCGroupID, QuoteID, Priority, StateAbbrv, Expidite, DisplayInformation, CreatedDate, UpdatedDate, creationUser, UpdateUser, Email, Eligibility, CallForReview, CurrentlyAutoInsured, IsFirstCommand, RecievedPremium, IsFinished, IsMobileManufactured, IsSlt, IsRental, IsBusinessTest, IsTest, NeedsUnderwriting, IssuedOnline, ApplicationCompleted, IsInterested, IsCondo, IsVacant, FormTypeID, CoverageTypeID, address1, City, IsPossibleDup);
        }
        
        public System.Threading.Tasks.Task InsertAfiFormAsync(
                    System.Nullable<int> CNTCGroupID, 
                    string QuoteID, 
                    int Priority, 
                    string StateAbbrv, 
                    bool Expidite, 
                    string DisplayInformation, 
                    System.DateTime CreatedDate, 
                    System.DateTime UpdatedDate, 
                    string creationUser, 
                    string UpdateUser, 
                    string Email, 
                    string Eligibility, 
                    bool CallForReview, 
                    bool CurrentlyAutoInsured, 
                    bool IsFirstCommand, 
                    bool RecievedPremium, 
                    bool IsFinished, 
                    bool IsMobileManufactured, 
                    bool IsSlt, 
                    bool IsRental, 
                    bool IsBusinessTest, 
                    bool IsTest, 
                    bool NeedsUnderwriting, 
                    bool IssuedOnline, 
                    bool ApplicationCompleted, 
                    bool IsInterested, 
                    bool IsCondo, 
                    bool IsVacant, 
                    int FormTypeID, 
                    int CoverageTypeID, 
                    string address1, 
                    string City, 
                    bool IsPossibleDup) {
            return base.Channel.InsertAfiFormAsync(CNTCGroupID, QuoteID, Priority, StateAbbrv, Expidite, DisplayInformation, CreatedDate, UpdatedDate, creationUser, UpdateUser, Email, Eligibility, CallForReview, CurrentlyAutoInsured, IsFirstCommand, RecievedPremium, IsFinished, IsMobileManufactured, IsSlt, IsRental, IsBusinessTest, IsTest, NeedsUnderwriting, IssuedOnline, ApplicationCompleted, IsInterested, IsCondo, IsVacant, FormTypeID, CoverageTypeID, address1, City, IsPossibleDup);
        }
    }
}
