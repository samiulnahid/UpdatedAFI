<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GreenDonut</name>
    </assembly>
    <members>
        <member name="T:GreenDonut.CacheKeyResolverDelegate`1">
            <summary>
            A delegate which is responsible for transforming the key that is used
            for accessing the backend, into a cache key before accessing the cache
            in any way.
            </summary>
            <typeparam name="TKey">A key type.</typeparam>
            <param name="key">A key.</param>
            <returns>A cache key.</returns>
        </member>
        <member name="T:GreenDonut.DataLoader`2">
             <summary>
             A <c>DataLoader</c> creates a public API for loading data from a
             particular data back-end with unique keys such as the `id` column of a
             SQL table or document name in a MongoDB database, given a batch loading
             function. -- facebook
            
             Each <c>DataLoader</c> instance contains a unique memoized cache. Use
             caution when used in long-lived applications or those which serve many
             users with different access permissions and consider creating a new
             instance per web request. -- facebook
            
             A default <c>DataLoader</c> implementation which supports automatic and
             manual batch dispatching. Also this implementation is using the default
             cache implementation which useses the LRU (Least Recently Used) caching
             algorithm for keeping track on which item has to be discarded first.
             </summary>
             <typeparam name="TKey">A key type.</typeparam>
             <typeparam name="TValue">A value type.</typeparam>
        </member>
        <member name="M:GreenDonut.DataLoader`2.#ctor(GreenDonut.FetchDataDelegate{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:GreenDonut.DataLoader`2"/> class.
            </summary>
            <param name="fetch">
            A delegate to fetch data batches which will be invoked every time
            when trying to setup a new batch request.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="fetch"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.DataLoader`2.#ctor(GreenDonut.DataLoaderOptions{`0},GreenDonut.FetchDataDelegate{`0,`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:GreenDonut.DataLoader`2"/> class.
            </summary>
            <param name="options">
            An options object to configure the behavior of this particular
            <see cref="T:GreenDonut.DataLoader`2"/>.
            </param>
            <param name="fetch">
            A delegate to fetch data batches which will be invoked every time
            when trying to setup a new batch request.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="options"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="fetch"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.DataLoader`2.FetchAsync(System.Collections.Generic.IReadOnlyList{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:GreenDonut.DataLoaderBase`2">
             <summary>
             A <c>DataLoader</c> creates a public API for loading data from a
             particular data back-end with unique keys such as the `id` column of a
             SQL table or document name in a MongoDB database, given a batch loading
             function. -- facebook
            
             Each <c>DataLoader</c> instance contains a unique memoized cache. Use
             caution when used in long-lived applications or those which serve many
             users with different access permissions and consider creating a new
             instance per web request. -- facebook
            
             This is an abstraction for all kind of <c>DataLoaders</c>.
             </summary>
             <typeparam name="TKey">A key type.</typeparam>
             <typeparam name="TValue">A value type.</typeparam>
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:GreenDonut.DataLoaderBase`2"/> class.
            </summary>
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.#ctor(GreenDonut.ITaskCache{`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:GreenDonut.DataLoaderBase`2"/> class.
            </summary>
            <param name="cache">
            A cache instance for <c>Tasks</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="cache"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.#ctor(GreenDonut.DataLoaderOptions{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:GreenDonut.DataLoaderBase`2"/> class.
            </summary>
            <param name="options">
            A configuration for <c>DataLoaders</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="options"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.#ctor(GreenDonut.DataLoaderOptions{`0},GreenDonut.ITaskCache{`1})">
            <summary>
            Initializes a new instance of the
            <see cref="T:GreenDonut.DataLoaderBase`2"/> class.
            </summary>
            <param name="options">
            A configuration for <c>DataLoaders</c>.
            </param>
            <param name="cache">
            A cache instance for <c>Tasks</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="options"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="cache"/> is <c>null</c>.
            </exception>
        </member>
        <member name="E:GreenDonut.DataLoaderBase`2.RequestBuffered">
            <inheritdoc />
        </member>
        <member name="P:GreenDonut.DataLoaderBase`2.BufferedRequests">
            <inheritdoc />
        </member>
        <member name="P:GreenDonut.DataLoaderBase`2.CachedValues">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.GreenDonut#IDataLoader#LoadAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.GreenDonut#IDataLoader#LoadAsync(System.Threading.CancellationToken,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.GreenDonut#IDataLoader#LoadAsync(System.Collections.Generic.IReadOnlyCollection{System.Object},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.GreenDonut#IDataLoader#Remove(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.GreenDonut#IDataLoader#Set(System.Object,System.Threading.Tasks.Task{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.DispatchAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.FetchAsync(System.Collections.Generic.IReadOnlyList{`0},System.Threading.CancellationToken)">
            <summary>
            A batch loading function which has to be implemented for each
            individual <c>DataLoader</c>. For every provided key must be a
            result returned. Also to be mentioned is, the results must be
            returned in the exact same order the keys were provided.
            </summary>
            <param name="keys">A list of keys.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A list of results which are in the exact same order as the provided
            keys.
            </returns>
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.LoadAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.LoadAsync(System.Threading.CancellationToken,`0[])">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.LoadAsync(System.Collections.Generic.IReadOnlyCollection{`0},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.Set(`0,System.Threading.Tasks.Task{`1})">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:GreenDonut.DataLoaderBase`2.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GreenDonut.DataLoaderExtensions">
            <summary>
            A bunch of convenient <c>DataLoader</c> extension methods.
            </summary>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.DispatchAsync(GreenDonut.IDataLoader)">
            <summary>
            Dispatches one or more batch requests. In case of auto dispatching
            we just trigger an implicit dispatch which could mean to interrupt
            a wait delay. Whereas in a manual dispatch scenario it could mean
            to dispatch explicitly.
            </summary>
            <param name="dataLoader">A data loader instance.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.LoadAsync(GreenDonut.IDataLoader,System.Object)">
            <summary>
            Loads a single value by key. This call may return a cached value
            or enqueues this single request for bacthing if enabled.
            </summary>
            <param name="dataLoader">A data loader instance.</param>
            <param name="key">A unique key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.LoadAsync(GreenDonut.IDataLoader,System.Object[])">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <param name="dataLoader">A data loader instance.</param>
            <param name="keys">A list of unique key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.LoadAsync(GreenDonut.IDataLoader,System.Collections.Generic.IReadOnlyCollection{System.Object})">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <param name="dataLoader">A data loader instance.</param>
            <param name="keys">A list of unique key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.Set(GreenDonut.IDataLoader,System.Object,System.Object)">
            <summary>
            Adds a new entry to the cache if not already exists.
            </summary>
            <param name="dataLoader">A data loader instance.</param>
            <param name="key">A cache entry key.</param>
            <param name="value">A cache entry value.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.LoadAsync``2(GreenDonut.IDataLoader{``0,``1},``0)">
            <summary>
            Loads a single value by key. This call may return a cached value
            or enqueues this single request for bacthing if enabled.
            </summary>
            <typeparam name="TKey">A key type.</typeparam>
            <typeparam name="TValue">A value type.</typeparam>
            <param name="dataLoader">A data loader instance.</param>
            <param name="key">A unique key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.LoadAsync``2(GreenDonut.IDataLoader{``0,``1},``0[])">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <typeparam name="TKey">A key type.</typeparam>
            <typeparam name="TValue">A value type.</typeparam>
            <param name="dataLoader">A data loader instance.</param>
            <param name="keys">A list of unique key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.LoadAsync``2(GreenDonut.IDataLoader{``0,``1},System.Collections.Generic.IReadOnlyCollection{``0})">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <typeparam name="TKey">A key type.</typeparam>
            <typeparam name="TValue">A value type.</typeparam>
            <param name="dataLoader">A data loader instance.</param>
            <param name="keys">A list of unique key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.DataLoaderExtensions.Set``2(GreenDonut.IDataLoader{``0,``1},``0,``1)">
            <summary>
            Adds a new entry to the cache if not already exists.
            </summary>
            <typeparam name="TKey">A key type.</typeparam>
            <typeparam name="TValue">A value type.</typeparam>
            <param name="dataLoader">A data loader instance.</param>
            <param name="key">A cache entry key.</param>
            <param name="value">A cache entry value.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="dataLoader"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:GreenDonut.DataLoaderOptions`1">
            <summary>
            An options object to configure the behavior for <c>DataLoader</c>.
            </summary>
            <typeparam name="TKey">A key type.</typeparam>
        </member>
        <member name="M:GreenDonut.DataLoaderOptions`1.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:GreenDonut.DataLoaderOptions`1"/> class.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.AutoDispatching">
            <summary>
            Gets or sets a value indicating whether auto dispatching is
            enabled. The default value is <c>false</c>.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.Batching">
            <summary>
            Gets or sets a value indicating whether batching is enabled. The
            default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.BatchRequestDelay">
            <summary>
            Gets or sets the time period to wait before trying to setup another
            batch request. This property takes only effect if
            <see cref="P:GreenDonut.DataLoaderOptions`1.Batching"/> is set to <c>true</c>. The default value is
            set to <c>50</c> milliseconds.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.CacheKeyResolver">
            <summary>
            Gets or sets a delegate which resolves the cache key which might
            differ from the key that is used to accessing the backend.
            The default value is set to <c>null</c>.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.CacheSize">
            <summary>
            Gets or sets the cache size. If set to <c>10</c> for example, it
            says only <c>10</c> cache entries can live inside the cache. When
            adding an additional entry the least recently used entry will be
            removed. The default value is set to <c>1000</c>.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.Caching">
            <summary>
            Gets or sets a value indicating whether caching is enabled. The
            default value is <c>true</c>.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.MaxBatchSize">
            <summary>
            Gets or sets the maximum batch size per request. If set to
            <c>0</c>, the request will be not cut into smaller batches. The
            default value is set to <c>0</c>.
            </summary>
        </member>
        <member name="P:GreenDonut.DataLoaderOptions`1.SlidingExpiration">
            <summary>
            Gets or sets the sliding cache expiration. If a cahce entry expires
            the entry will be removed from the cache. If set to
            <see cref="F:System.TimeSpan.Zero"/> the sliding expiration is disabled.
            This means an entry could live forever if the
            <see cref="P:GreenDonut.DataLoaderOptions`1.CacheSize"/> is not exceeded. The default value is set
            to <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
        </member>
        <member name="T:GreenDonut.FetchDataDelegate`2">
            <summary>
            A data fetching delegate for <c>DataLoader</c>. For every provided key
            must be a result returned. Also to be mentioned is, the results must be
            returned in the exact same order the keys were provided.
            </summary>
            <typeparam name="TKey">A key type.</typeparam>
            <typeparam name="TValue">A value type.</typeparam>
            <param name="keys">A list of keys.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A list of results which are in the exact same order as the provided
            keys.
            </returns>
        </member>
        <member name="T:GreenDonut.IDataLoader">
             <summary>
             A <c>DataLoader</c> creates a public API for loading data from a
             particular data back-end with unique keys such as the `id` column of a
             SQL table or document name in a MongoDB database, given a batch loading
             function. -- facebook
            
             Each <c>DataLoader</c> instance contains a unique memoized cache. Use
             caution when used in long-lived applications or those which serve many
             users with different access permissions and consider creating a new
             instance per web request. -- facebook
             </summary>
        </member>
        <member name="E:GreenDonut.IDataLoader.RequestBuffered">
            <summary>
            Raises when an incoming data request is added to the buffer. Will
            never be raised if batching is disabled.
            </summary>
        </member>
        <member name="P:GreenDonut.IDataLoader.BufferedRequests">
            <summary>
            Gets the current count of buffered data requests waiting for being
            dispatched as batches. Will always return <c>0</c> if batching is
            disabled.
            </summary>
        </member>
        <member name="P:GreenDonut.IDataLoader.CachedValues">
            <summary>
            Gets the current count of cached values. Will always return
            <c>0</c> if caching is disabled.
            </summary>
        </member>
        <member name="M:GreenDonut.IDataLoader.Clear">
            <summary>
            Empties the complete cache.
            </summary>
        </member>
        <member name="M:GreenDonut.IDataLoader.DispatchAsync(System.Threading.CancellationToken)">
            <summary>
            Dispatches one or more batch requests. In case of auto dispatching
            we just trigger an implicit dispatch which could mean to interrupt
            a wait delay. Whereas in a manual dispatch scenario it could mean
            to dispatch explicitly.
            </summary>
        </member>
        <member name="M:GreenDonut.IDataLoader.LoadAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            Loads a single value by key. This call may return a cached value
            or enqueues this single request for bacthing if enabled.
            </summary>
            <param name="key">A unique key.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.IDataLoader.LoadAsync(System.Threading.CancellationToken,System.Object[])">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <param name="keys">A list of unique keys.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A list of values in the same order as the provided keys.
            </returns>
        </member>
        <member name="M:GreenDonut.IDataLoader.LoadAsync(System.Collections.Generic.IReadOnlyCollection{System.Object},System.Threading.CancellationToken)">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <param name="keys">A list of unique keys.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A list of values in the same order as the provided keys.
            </returns>
        </member>
        <member name="M:GreenDonut.IDataLoader.Remove(System.Object)">
            <summary>
            Removes a single entry from the cache.
            </summary>
            <param name="key">A cache entry key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.IDataLoader.Set(System.Object,System.Threading.Tasks.Task{System.Object})">
            <summary>
            Adds a new entry to the cache if not already exists.
            </summary>
            <param name="key">A cache entry key.</param>
            <param name="value">A cache entry value.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:GreenDonut.IDataLoader`2">
             <summary>
             A <c>DataLoader</c> creates a public API for loading data from a
             particular data back-end with unique keys such as the `id` column of a
             SQL table or document name in a MongoDB database, given a batch loading
             function. -- facebook
            
             Each <c>DataLoader</c> instance contains a unique memoized cache. Use
             caution when used in long-lived applications or those which serve many
             users with different access permissions and consider creating a new
             instance per web request. -- facebook
             </summary>
             <typeparam name="TKey">A key type.</typeparam>
             <typeparam name="TValue">A value type.</typeparam>
        </member>
        <member name="M:GreenDonut.IDataLoader`2.LoadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Loads a single value by key. This call may return a cached value
            or enqueues this single request for bacthing if enabled.
            </summary>
            <param name="key">A unique key.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <returns>
            A single result which may contain a value or information about the
            error which may occurred during the call.
            </returns>
        </member>
        <member name="M:GreenDonut.IDataLoader`2.LoadAsync(System.Threading.CancellationToken,`0[])">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <param name="keys">A list of unique keys.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A list of values in the same order as the provided keys.
            </returns>
        </member>
        <member name="M:GreenDonut.IDataLoader`2.LoadAsync(System.Collections.Generic.IReadOnlyCollection{`0},System.Threading.CancellationToken)">
            <summary>
            Loads multiple values by keys. This call may return cached values
            and enqueues requests which were not cached for bacthing if
            enabled.
            </summary>
            <param name="keys">A list of unique keys.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="keys"/> is <c>null</c>.
            </exception>
            <returns>
            A list of values in the same order as the provided keys.
            </returns>
        </member>
        <member name="M:GreenDonut.IDataLoader`2.Remove(`0)">
            <summary>
            Removes a single entry from the cache.
            </summary>
            <param name="key">A cache entry key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.IDataLoader`2.Set(`0,System.Threading.Tasks.Task{`1})">
            <summary>
            Adds a new entry to the cache if not already exists.
            </summary>
            <param name="key">A cache entry key.</param>
            <param name="value">A cache entry value.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:GreenDonut.ITaskCache`1">
            <summary>
            A memorization cache for <c>DataLoader</c>.
            </summary>
            <typeparam name="TValue">A value type.</typeparam>
        </member>
        <member name="P:GreenDonut.ITaskCache`1.Size">
            <summary>
            Gets the maximum size of the cache.
            </summary>
        </member>
        <member name="P:GreenDonut.ITaskCache`1.SlidingExpirartion">
            <summary>
            Gets the sliding expiration for the cache entries.
            </summary>
        </member>
        <member name="P:GreenDonut.ITaskCache`1.Usage">
            <summary>
            Gets the count of the entries inside the cache.
            </summary>
        </member>
        <member name="M:GreenDonut.ITaskCache`1.Clear">
            <summary>
            Clears the complete cache.
            </summary>
        </member>
        <member name="M:GreenDonut.ITaskCache`1.Remove(System.Object)">
            <summary>
            Removes a specific entry from the cache.
            </summary>
            <param name="key">A cache entry key.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:GreenDonut.ITaskCache`1.TryAdd(System.Object,System.Threading.Tasks.Task{`0})">
            <summary>
            Tries to add a single entry to the cache. It does nothing if the
            cache entry exists already.
            </summary>
            <param name="key">A cache entry key.</param>
            <param name="value">A cache entry value.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="value"/> is <c>null</c>.
            </exception>
            <returns>
            A value indicating whether the add was successful.
            </returns>
        </member>
        <member name="M:GreenDonut.ITaskCache`1.TryGetValue(System.Object,System.Threading.Tasks.Task{`0}@)">
            <summary>
            Tries to gets a single entry from the cache.
            </summary>
            <param name="key">A cache entry key.</param>
            <param name="value">A single cache entry value.</param>
            <exception cref="T:System.ArgumentNullException">
            Throws if <paramref name="key"/> is <c>null</c>.
            </exception>
            <returns>
            A value indicating whether the get request returned an entry.
            </returns>
        </member>
        <member name="T:GreenDonut.RequestBufferedEventHandler">
            <summary>
            Represents the method that will handle an
            <see cref="E:GreenDonut.IDataLoader.RequestBuffered"/> event.
            </summary>
            <param name="sender">A <c>DataLoader</c> instance.</param>
            <param name="eventArgs">
            An object containing context related arguments.
            </param>
        </member>
        <member name="T:GreenDonut.Result`1">
            <summary>
            A wrapper for a single value which could contain a valid value or any
            error.
            </summary>
            <typeparam name="TValue">A value type.</typeparam>
        </member>
        <member name="P:GreenDonut.Result`1.Error">
            <summary>
            Gets an error if <see cref="P:GreenDonut.Result`1.IsError"/> is <c>true</c>;
            otherwise <c>null</c>.
            </summary>
        </member>
        <member name="P:GreenDonut.Result`1.IsError">
            <summary>
            Gets a value indicating whether the result is an error.
            </summary>
        </member>
        <member name="P:GreenDonut.Result`1.Value">
            <summary>
            Gets the value. If <see cref="P:GreenDonut.Result`1.IsError"/> is <c>true</c>, returns
            <c>null</c> or <c>default</c> depending on its type.
            </summary>
        </member>
        <member name="M:GreenDonut.Result`1.Equals(GreenDonut.Result{`0})">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.Result`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.Result`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:GreenDonut.Result`1.Reject(System.Exception)">
            <summary>
            Creates a new error result.
            </summary>
            <param name="error">An arbitrary error.</param>
            <returns>An error result.</returns>
        </member>
        <member name="M:GreenDonut.Result`1.Resolve(`0)">
            <summary>
            Creates a new value result.
            </summary>
            <param name="value">An arbitrary value.</param>
            <returns>A value result.</returns>
        </member>
        <member name="M:GreenDonut.Result`1.op_Implicit(System.Exception)~GreenDonut.Result{`0}">
            <summary>
            Creates a new error result.
            </summary>
            <param name="error">An arbitrary error.</param>
        </member>
        <member name="M:GreenDonut.Result`1.op_Implicit(`0)~GreenDonut.Result{`0}">
            <summary>
            Creates a new value result.
            </summary>
            <param name="value">An arbitrary value.</param>
        </member>
        <member name="M:GreenDonut.Result`1.op_Implicit(GreenDonut.Result{`0})~System.Exception">
            <summary>
            Extracts the error from a result.
            </summary>
            <param name="result">An arbitrary result.</param>
        </member>
        <member name="M:GreenDonut.Result`1.op_Implicit(GreenDonut.Result{`0})~`0">
            <summary>
            Extracts the value from a result.
            </summary>
            <param name="result">An arbitrary result.</param>
        </member>
        <member name="M:GreenDonut.TaskCache`1.Dispose">
            <inheritdoc/>
        </member>
    </members>
</doc>
