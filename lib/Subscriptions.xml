<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Subscriptions</name>
    </assembly>
    <members>
        <member name="T:HotChocolate.Subscriptions.IEventStream`1">
            <summary>
            <see cref="T:HotChocolate.Subscriptions.IEventStream`1" /> is a stream of internal messages
            that is used to process stream results.
            </summary>
        </member>
        <member name="T:HotChocolate.Subscriptions.ITopicEventReceiver">
            <summary>
            The <see cref="T:HotChocolate.Subscriptions.ITopicEventReceiver" /> creates subscriptions to
            specific event topics and returns an <see cref="T:HotChocolate.Subscriptions.IEventStream`1" />
            which represents a stream of event message for the specified topic.
            </summary>
        </member>
        <member name="M:HotChocolate.Subscriptions.ITopicEventReceiver.SubscribeAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Subscribes to the specified event <paramref name="topic" />.
            </summary>
            <param name="topic">
            The topic to which the event message belongs to.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Subscriptions.IEventStream`1" />
            for the given event <paramref name="topic" />.
            </returns>
        </member>
        <member name="T:HotChocolate.Subscriptions.ITopicEventSender">
            <summary>
            The topic event sender sends event messages to the pub/sub-system.
            Typically a mutation would use the event dispatcher to raise events
            after some changes were committed to the backend system.
            </summary>
        </member>
        <member name="M:HotChocolate.Subscriptions.ITopicEventSender.SendAsync``2(``0,``1,System.Threading.CancellationToken)">
            <summary>
            Sends an event message to the pub/sub-system.
            </summary>
            <param name="topic">
            The topic to which the event message belongs to.
            </param>
            <param name="message">
            The event message.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="M:HotChocolate.Subscriptions.ITopicEventSender.CompleteAsync``1(``0)">
            <summary>
            Completes a event topic which causes the
            <see cref="T:HotChocolate.Subscriptions.IEventStream`1" /> to complete.
            </summary>
            <param name="topic">
            The topic to which the event message belongs to.
            </param>
            <param name="message">
            The event message.
            </param>
        </member>
        <member name="T:HotChocolate.Subscriptions.IEventDescription">
            <summary>
            Describes an event in the GraphQL schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Subscriptions.IEventDescription.Name">
            <summary>
            Gets the event name.
            </summary>
            <value>
            The event name.
            </value>
        </member>
        <member name="P:HotChocolate.Subscriptions.IEventDescription.Arguments">
            <summary>
            Gets the event arguments values.
            </summary>
            <value>
            The event arguments.
            </value>
        </member>
        <member name="T:HotChocolate.Subscriptions.IEventMessage">
            <summary>
            The event message of the pub/sub system.
            </summary>
        </member>
        <member name="P:HotChocolate.Subscriptions.IEventMessage.Event">
            <summary>
            Gets the event that yielded this message.
            </summary>
            <value>The event.</value>
        </member>
        <member name="P:HotChocolate.Subscriptions.IEventMessage.Payload">
            <summary>
            Gets the message payload.
            </summary>
            <value></value>
        </member>
        <member name="T:HotChocolate.Subscriptions.IEventRegistry">
            <summary>
            The event registry manages the subscriptions to events.
            </summary>
        </member>
        <member name="M:HotChocolate.Subscriptions.IEventRegistry.SubscribeAsync(HotChocolate.Subscriptions.IEventDescription,System.Threading.CancellationToken)">
            <summary>
            Subscribes to an event specified by
            <paramref name="eventDescription"/>.
            </summary>
            <returns>
            Returns an event stream which yields the event
            messages of the subscribed event.
            </returns>
            <param name="eventDescription">
            The event description.
            </param>
            <param name="eventDescription">
            The cancellation token.
            </param>
        </member>
        <member name="T:HotChocolate.Subscriptions.IEventSender">
             <summary>
             The event sender sends event messages to the pub/sub-system.
             Typically a mutation would use the event sender to raise events
             after some changes were committed to the backend system.
            
             Moreover, the <see cref="T:HotChocolate.Subscriptions.IEventSender"/> could also be used from outside
             the GraphQL schema process to raise events that than will trigger
             subscriptions to yield new results to their subscribers.
             </summary>
        </member>
        <member name="M:HotChocolate.Subscriptions.IEventSender.SendAsync(HotChocolate.Subscriptions.IEventMessage,System.Threading.CancellationToken)">
            <summary>
            Sends an event message to the pub/sub-system.
            </summary>
            <param name="message">
            The event message.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
        </member>
        <member name="T:HotChocolate.Subscriptions.IEventStream">
            <summary>
            The event stream represents the subscription to an event
            as a stream of messages.
            </summary>
        </member>
        <member name="M:HotChocolate.Subscriptions.IEventStream.CompleteAsync(System.Threading.CancellationToken)">
            <summary>
            Completes the event stream and deletes the pub/sub system subscription.
            </summary>
        </member>
    </members>
</doc>
