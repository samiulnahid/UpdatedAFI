<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Types</name>
    </assembly>
    <members>
        <member name="T:HotChocolate.Configuration.FieldMiddlewareApplication">
            <summary>
            This enum specified on which fields custom field
            middleware is applied to.
            </summary>
        </member>
        <member name="F:HotChocolate.Configuration.FieldMiddlewareApplication.UserDefinedFields">
            <summary>
            Custom field middleware is only applied to
            user-defined fields and not to introspection fields.
            </summary>
        </member>
        <member name="F:HotChocolate.Configuration.FieldMiddlewareApplication.AllFields">
            <summary>
            Custom field middleware is applied to all fields
            (user-defined fields and introspection fields).
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.IReadOnlySchemaOptions.RemoveUnreachableTypes">
            <summary>
            Defines if types shall be removed from the schema that are
            unreachable from the root types.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.IReadOnlySchemaOptions.DefaultBindingBehavior">
            <summary>
            Defines the default binding behavior.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.IReadOnlySchemaOptions.FieldMiddleware">
            <summary>
            Defines on which fields a middleware pipeline can be applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ISchemaOptions.RemoveUnreachableTypes">
            <summary>
            Defines if types shall be removed from the schema that are
            unreachable from the root types.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ISchemaOptions.DefaultBindingBehavior">
            <summary>
            Defines the default binding behavior.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.ISchemaOptions.FieldMiddleware">
            <summary>
            Defines on which fields a middleware pipeline can be applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.SchemaOptions.RemoveUnreachableTypes">
            <summary>
            Defines if types shall be removed from the schema that are
            unreachable from the root types.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.SchemaOptions.DefaultBindingBehavior">
            <summary>
            Defines the default binding behavior.
            </summary>
        </member>
        <member name="P:HotChocolate.Configuration.SchemaOptions.FieldMiddleware">
            <summary>
            Defines on which fields a middleware pipeline can be applied on.
            </summary>
        </member>
        <member name="T:HotChocolate.ISchema">
            <summary>
            A GraphQL Schema defines the capabilities of a GraphQL server. It
            exposes all available types and directives on the server, as well as
            the entry points for query, mutation, and subscription operations.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.Services">
            <summary>
            Gets the global schema services.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.QueryType">
            <summary>
            The type that query operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.MutationType">
            <summary>
            If this server supports mutation, the type that
            mutation operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.SubscriptionType">
            <summary>
            If this server support subscription, the type that
            subscription operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.Types">
            <summary>
            Gets all the schema types.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchema.DirectiveTypes">
            <summary>
            Gets all the direcive types that are supported by this schema.
            </summary>
        </member>
        <member name="M:HotChocolate.ISchema.GetType``1(HotChocolate.NameString)">
            <summary>
            Gets a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <returns>The type.</returns>
            <exception cref="T:System.ArgumentException">
            The specified type does not exist or is not of the
            specified type kind.
            </exception>
        </member>
        <member name="M:HotChocolate.ISchema.TryGetType``1(HotChocolate.NameString,``0@)">
            <summary>
            Tries to get a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <param name="type">The resolved type.</param>
            <returns>
            <c>true</c>, if a type with the name exists and is of the specified
            kind, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.TryGetClrType(HotChocolate.NameString,System.Type@)">
            <summary>
            Tries to get the .net type representation of a schema.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="clrType">The resolved .net type.</param>
            <returns>
            <c>true</c>, if a .net type was found that was bound
            the the specified schema type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.GetPossibleTypes(HotChocolate.Types.INamedType)">
            <summary>
            Gets the possible object types to
            an abstract type (union type or interface type).
            </summary>
            <param name="abstractType">The abstract type.</param>
            <returns>
            Returns a collection with all possible object types
            for the given abstract type.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.GetDirectiveType(HotChocolate.NameString)">
            <summary>
            Gets a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <returns>
            Returns directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </returns>
        </member>
        <member name="M:HotChocolate.ISchema.TryGetDirectiveType(HotChocolate.NameString,HotChocolate.Types.DirectiveType@)">
            <summary>
            Tries to get a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <param name="directiveType">
            The directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </param>
            <returns>
            <c>true</c>, if a directive type with the specified
            name exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:HotChocolate.ISchemaError.Message">
            <summary>
            Gets the error message.
            This property is mandatory and cannot be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Code">
            <summary>
            Gets an error code that can be used to automatically
            process an error.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Path">
            <summary>
            Gets the path to the object that caused the error.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Extensions">
            <summary>
            Gets non-spec error properties.
            This property is optional and can be null.
            </summary>
        </member>
        <member name="P:HotChocolate.ISchemaError.Exception">
            <summary>
            Gets the exception associated with this error.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.SubscribeAttribute.MessageType">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.SubscribeAttribute.With">
            <summary>
            The method that shall be used to subscribe to the pub/sub system.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.TopicAttribute.Name">
            <summary>
            Gets or sets the constant topic name that shall be used to receive messages.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IField.DeclaringType">
            <summary>
            The type of which declares this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IHasSyntaxNode.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IInputField">
            <summary>
            Represents an input field. Input fields can be arguments of fields
            or fields of an input objects.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInputField.Type">
            <summary>
            Gets the type of this input field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInputField.Serializer">
            <summary>
            Gets the field serializer.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.IInputField.DefaultValue">
            <summary>
            Gets the default value literal of this field.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.INullableType">
            <summary>
            Represents types that can be null.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ISerializableType.Serialize(System.Object)">
            <summary>
            Serializes an instance of this type to
            the specified serialization type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ISerializableType.Deserialize(System.Object)">
            <summary>
            Deserializes a serialized instance of this type.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ISerializableType.TryDeserialize(System.Object,System.Object@)">
            <summary>
            Tries to deserialize a serialized instance of this type.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TypeKind.Interface">
            <summary>
            Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TypeKind.Union">
            <summary>
            Indicates this type is a union. `possibleTypes` is a valid field.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TypeKind.InputObject">
            <summary>
            Indicates this type is an input object. `inputFields` is a valid field.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TypeKind.Enum">
            <summary>
            Indicates this type is an enum. `enumValues` is a valid field.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TypeKind.List">
            <summary>
            Indicates this type is a list. `ofType` is a valid field.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TypeKind.NonNull">
            <summary>
            Indicates this type is a non-null. `ofType` is a valid field.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetReturnType(System.Reflection.MemberInfo,HotChocolate.Types.TypeContext)">
            <summary>
            Gets the field type from a <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
            <param name="member">
            The member from which the field type shall be extracted.
            </param>
            <param name="context">
            The context defines if the field has an input or output context.
            </param>
            <returns>
            Returns a type reference describing the type of the field.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.ITypeInspector.GetArgumentType(System.Reflection.ParameterInfo)">
            <summary>
            Gets the field argument type from a <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
            <param name="parameter">
            The parameter from which the argument type shall be extracted.
            </param>
            <returns>
            Returns a type reference describing the type of the argument.
            </returns>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Name">
            <summary>
            Gets or sets the name the type shall have.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Description" -->
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.ContextData">
            <summary>
            Get access to context data that are copied to the type
            and can be used for customizations.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase.Dependencies">
            <summary>
            Gets access to additional type dependencies.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase`1.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DefinitionBase`1.HotChocolate#Types#IHasSyntaxNode#SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.IsRepeatable">
            <summary>
            Defines if this directive can be specified multiple
            times on the same object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.ClrType">
            <summary>
            Gets or sets the .net type representation of this directive.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.MiddlewareComponents">
            <summary>
            Gets or the associated middleware components.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.Locations">
            <summary>
            Defines the location on which a directive can be annotated.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.DirectiveTypeDefinition.Arguments">
            <summary>
            Gets the directive arguments.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:HotChocolate.Types.Descriptors.Definitions.EnumValueDefinition.Member" -->
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Type">
            <summary>
            Gets the field type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Ignore">
            <summary>
            Defines if this field is ignored and will
            not be included into the schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase.Directives">
            <summary>
            Gets the list of directives that are annotated to this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase`1.SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.FieldDefinitionBase`1.HotChocolate#Types#IHasSyntaxNode#SyntaxNode">
            <summary>
            The associated syntax node from the GraphQL schema SDL.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.IHasDirectiveDefinition.Directives">
            <summary>
            Gets the list of directives that are annotated to
            the implementing object.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration.On">
            <summary>
            Defines on which type initialization step this
            configurations is applied on.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration.Dependencies">
            <summary>
            Defines types on on which this configuration is dependant on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Types.Descriptors.Definitions.ILazyTypeConfiguration.Configure(HotChocolate.Configuration.ICompletionContext)">
            <summary>
            Executes this configuration.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.SchemaTypeDefinition.Directives">
            <summary>
            Gets the list of directives that are annotated to this schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.ClrType">
            <summary>
            Gets or sets the .net type representation of this type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Descriptors.Definitions.TypeDefinitionBase`1.Directives">
            <summary>
            Gets the list of directives that are annotated to this type.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Default">
            <summary>
            The dependency instance does not be completed.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Named">
            <summary>
            The dependency instance needs to have it`s name completed.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.Descriptors.Definitions.TypeDependencyKind.Completed">
            <summary>
            The dependency instance needs to be fully completed.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode)">
            <summary>
            Associates the argument with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="inputValueDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveArgumentDescriptor.SyntaxNode(HotChocolate.Language.InputValueDefinitionNode)">
            <summary>
            Associates the argument with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="inputValueDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode)">
            <summary>
            Associates the specified <paramref name="directiveDefinitionNode"/>
            with the <see cref="T:HotChocolate.Types.DirectiveType"/>.
            </summary>
            <param name="directiveDefinitionNode">
            The <see cref="T:HotChocolate.Language.DirectiveDefinitionNode"/> of a parsed schema.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.DirectiveType"/>.
            </summary>
            <param name="value">The directive type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.DirectiveType"/>
            that can be accessd via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Argument(HotChocolate.NameString)">
            <summary>
            Specifies a directive argument.
            </summary>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Location(HotChocolate.Types.DirectiveLocation)">
            <summary>
            Specifies in which location the directive belongs in.
            </summary>
            <param name="value">The directive location.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Use(HotChocolate.Resolvers.DirectiveMiddleware)">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Use``1">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Use``1(System.Func{System.IServiceProvider,HotChocolate.Resolvers.FieldDelegate,``0})">
            <summary>
            Configure a middleware for this directive.
            </summary>
            <param name="factory">The middleware factory.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor.Repeatable">
            <summary>
            Allows this directive type to be declared multiple times
            in a single location.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.IDirectiveTypeDescriptor`1.SyntaxNode(HotChocolate.Language.DirectiveDefinitionNode)" -->
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.DirectiveType"/>.
            </summary>
            <param name="value">The directive type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.DirectiveType"/>
            that can be accessd via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.BindArguments(HotChocolate.Types.BindingBehavior)">
             <summary>
             Defines the argument binding behavior.
            
             The default binding behavior is set to
             <see cref="F:HotChocolate.Types.BindingBehavior.Implicit"/>.
             </summary>
             <param name="behavior">
             The binding behavior.
            
             Implicit:
             The directive type descriptor will try to infer the directive type
             arguments from the specified .net directive type representation
             (<typeparamref name="T"/>).
            
             Explicit:
             All arguments have to specified explicitly via
             <see cref="!:IDirectiveTypeDescriptor&lt;T&gt;.Field&lt;TValue&gt;(Expression&lt;Func&lt;T, TValue&gt;&gt;)"/>.
             </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.BindArgumentsExplicitly">
            <summary>
            Defines that all arguments have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.BindArgumentsImplicitly">
            <summary>
            The directive type will add arguments for all compatible properties.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Argument(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies a directive argument.
            </summary>
            <param name="property">
            An expression selecting a property <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Argument(HotChocolate.NameString)">
            <summary>
            Specifies a directive argument.
            </summary>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Location(HotChocolate.Types.DirectiveLocation)">
            <summary>
            Specifies in which location the directive belongs in.
            </summary>
            <param name="value">The directive location.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Use(HotChocolate.Resolvers.DirectiveMiddleware)">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Use``1">
            <summary>
            Configure a middleware for this directive.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Use``1(System.Func{System.IServiceProvider,HotChocolate.Resolvers.FieldDelegate,``0})">
            <summary>
            Configure a middleware for this directive.
            </summary>
            <param name="factory">The middleware factory.</param>
        </member>
        <member name="M:HotChocolate.Types.IDirectiveTypeDescriptor`1.Repeatable">
            <summary>
            Allows this directive type to be declared multiple
            times in a single location.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode)">
            <summary>
            Associates the enum type with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="enumTypeDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name the enum type shall have.
            </summary>
            <param name="value">
            The name value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.Description(System.String)">
            <summary>
            Defines the description that the enum type shall have.
            </summary>
            <param name="value">
            The description value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.BindValuesExplicitly">
            <summary>
            Defines that all enum values have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor.BindValuesImplicitly">
            <summary>
            Defines that all enum values shall be infered
            from the associated .Net type,
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.SyntaxNode(HotChocolate.Language.EnumTypeDefinitionNode)">
            <summary>
            Associates the enum type with a syntax node
            of the parsed GraphQL SDL.
            </summary>
            <param name="enumTypeDefinition">
            The the type definition node.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name the enum type shall have.
            </summary>
            <param name="value">
            The name value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.Description(System.String)">
            <summary>
            Defines the description that the enum type shall have.
            </summary>
            <param name="value">
            The description value.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.BindValuesExplicitly">
            <summary>
            Defines that all enum values have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IEnumTypeDescriptor`1.BindValuesImplicitly">
            <summary>
            Defines that all enum values shall be infered
            from the associated .Net type,
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IInputObjectTypeDescriptor`1.BindFieldsExplicitly">
            <summary>
            Defines that all fields have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IInputObjectTypeDescriptor`1.BindFieldsImplicitly">
            <summary>
            Defines that all fields shall be infered
            from the associated .Net type,
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.IInterfaceTypeDescriptor.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode)" -->
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="value">The interface type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.InterfaceType"/>
            that can be accessd via introspection.
            </summary>
            <param name="value">The interface type description.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.IInterfaceTypeDescriptor`1.SyntaxNode(HotChocolate.Language.InterfaceTypeDefinitionNode)" -->
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.InterfaceType"/>.
            </summary>
            <param name="value">The interface type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.InterfaceType"/>
            that can be accessd via introspection.
            </summary>
            <param name="value">The interface type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.BindFields(HotChocolate.Types.BindingBehavior)">
             <summary>
             Defines the field binding behavior.
            
             The default binding behavior is set to
             <see cref="F:HotChocolate.Types.BindingBehavior.Implicit"/>.
             </summary>
             <param name="behavior">
             The binding behavior.
            
             Implicit:
             The object type descriptor will try to infer the object type
             fields from the specified .net object type representation
             (<typeparamref name="T"/>).
            
             Explicit:
             All field have to be specified explicitly via
             <see cref="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.Field(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})"/>
             or <see cref="!:Field(string)"/>.
             </param>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.BindFieldsExplicitly">
            <summary>
            Defines that all fields have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IInterfaceTypeDescriptor`1.BindFieldsImplicitly">
            <summary>
            Defines that all fields shall be infered
            from the associated .Net type,
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.SyntaxNode(HotChocolate.Language.ObjectTypeDefinitionNode)">
            <summary>
            Associates the specified <paramref name="objectTypeDefinition"/>
            with the <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="objectTypeDefinition">
            The <see cref="T:HotChocolate.Language.ObjectTypeDefinitionNode"/> of a parsed schema.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="value">The object type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Description(System.String)">
            <summary>
            Adds explanatory text to the <see cref="T:HotChocolate.Types.ObjectType"/>
            that can be accessd via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Interface``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Interface``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Interface(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Implements``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Implements``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Implements(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Include``1">
            <summary>
            Includes a resolver type and imports all the methods and
            fields from it.
            </summary>
            <typeparam name="TResolver">A resolver type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.IsOfType(HotChocolate.Types.IsOfType)">
            <summary>
            Specifies a delegate that can determine if a resolver result
            represents an object instance of this <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="isOfType">
            The delegate that provides the IsInstanceOfType functionality.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Field(HotChocolate.NameString)">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="name">
            The name that the field shall have.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specifies an object type field which is bound to a resolver type.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="TResolver"/>.
            The resolver type containing the property or method.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Name(HotChocolate.NameString)">
            <summary>
            Defines the name of the <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="value">The object type name.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Description(System.String)">
            <summary>
            Adds explanatory text of the <see cref="T:HotChocolate.Types.ObjectType"/>
            that can be accessd via introspection.
            </summary>
            <param name="value">The object type description.</param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.BindFields(HotChocolate.Types.BindingBehavior)">
             <summary>
             Defines the field binding behavior.
            
             The default binding behavior is set to
             <see cref="F:HotChocolate.Types.BindingBehavior.Implicit"/>.
             </summary>
             <param name="behavior">
             The binding behavior.
            
             Implicit:
             The object type descriptor will try to infer the object type
             fields from the specified .net object type representation
             (<typeparamref name="T"/>).
            
             Explicit:
             All field have to be specified explicitly via
             <see cref="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})"/>
             or <see cref="!:Field(string)"/>.
             </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.BindFieldsExplicitly">
            <summary>
            Defines that all fields have to be specified explicitly.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.BindFieldsImplicitly">
            <summary>
            Defines that all fields shall be infered
            from the associated .Net type,
            </summary>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Interface``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Interface``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Interface(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Implements``1">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Implements``1(``0)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <typeparam name="T">The interface type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Implements(HotChocolate.Language.NamedTypeNode)">
            <summary>
            Specifies an interface that is implemented by the
            <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="type">
            A syntax node representing an interface type.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Include``1">
            <summary>
            Includes a resolver type and imports all the methods and
            fields from it.
            </summary>
            <typeparam name="TResolver">A resolver type.</typeparam>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.IsOfType(HotChocolate.Types.IsOfType)">
            <summary>
            Specifies a delegate that can determine if a resolver result
            represents an object instance of this <see cref="T:HotChocolate.Types.ObjectType"/>.
            </summary>
            <param name="isOfType">
            The delegate that provides the IsInstanceOfType functionality.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field(HotChocolate.NameString)">
            <summary>
            Specifies an object type field.
            </summary>
            <param name="name">
            The name that the field shall have.
            </param>
        </member>
        <member name="M:HotChocolate.Types.IObjectTypeDescriptor`1.Field``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specifies an object type field which is bound to a resolver type.
            </summary>
            <param name="propertyOrMethod">
            An expression selecting a property or method of
            <typeparamref name="TResolver"/>.
            The resolver type containing the property or method.
            </param>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``1(HotChocolate.Types.IObjectFieldDescriptor,System.String)">
            <summary>
            Subscribes to fixed topic on the <see cref="T:HotChocolate.Subscriptions.ITopicEventReceiver" />.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="topicName">
            A name representing the topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``2(HotChocolate.Types.IObjectFieldDescriptor,System.String)">
            <summary>
            Subscribes to a topic that is represented by an argument value.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="argumentName">
            A name of the argument that is used to resolve the topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``2(HotChocolate.Types.IObjectFieldDescriptor,System.Func{HotChocolate.Resolvers.IResolverContext,``0})">
            <summary>
            Subscribes to a topic that is resolved by executing <paramref name="resolveTopic" />.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="resolveTopic">
            A delegate that resolves a value that will used as topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="M:HotChocolate.Types.SubscribeResolverObjectFieldDescriptorExtensions.SubscribeToTopic``2(HotChocolate.Types.IObjectFieldDescriptor,System.Func{HotChocolate.Resolvers.IResolverContext,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Subscribes to a topic that is resolved by executing <paramref name="resolveTopic" />.
            </summary>
            <param name="descriptor">
            The object field descriptor.
            </param>
            <param name="resolveTopic">
            A delegate that resolves a value that will used as topic.
            </param>
            <typeparam name="TMessage">
            The type of the message / event payload.
            </typeparam>
        </member>
        <member name="T:HotChocolate.Types.DirectiveLocation">
            <summary>
            A Directive can be adjacent to many parts of the GraphQL language,
            a DirectiveLocation describes one such possible adjacencies.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Query">
            <summary>
            Location adjacent to a query operation.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Mutation">
            <summary>
            Location adjacent to a mutation operation.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Subscription">
            <summary>
            Location adjacent to a subscription operation.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Field">
            <summary>
            Location adjacent to a field.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.FragmentDefinition">
            <summary>
            Location adjacent to a fragment definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.FragmentSpread">
            <summary>
            Location adjacent to a fragment spread.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.InlineFragment">
            <summary>
            Location adjacent to an inline fragment.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Schema">
            <summary>
            Location adjacent to a schema definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Scalar">
            <summary>
            Location adjacent to a scalar definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Object">
            <summary>
            Location adjacent to an object type definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.FieldDefinition">
            <summary>
            Location adjacent to a field definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.ArgumentDefinition">
            <summary>
            Location adjacent to an argument definition
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Interface">
            <summary>
            Location adjacent to an interface definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Union">
            <summary>
            Location adjacent to a union definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.Enum">
            <summary>
            Location adjacent to an enum definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.EnumValue">
            <summary>
            Location adjacent to an enum value definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.InputObject">
            <summary>
            Location adjacent to an input object type definition.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.DirectiveLocation.InputFieldDefinition">
            <summary>
            Location adjacent to an input object field definition.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.DeprecatedDirectiveType">
             <summary>
             The @deprecated directive is used within the type system definition
             language to indicate deprecated portions of a GraphQL service’s schema,
             such as deprecated fields on a type or deprecated enum values.
            
             Deprecations include a reason for why it is deprecated,
             which is formatted using Markdown syntax (as specified by CommonMark).
             </summary>
        </member>
        <member name="T:HotChocolate.Types.MultiplierPathString">
            <summary>
            The type name string guarantees that a string adheres to the
            GraphQL spec rules: /[_A-Za-z][_0-9A-Za-z]*/
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HotChocolate.Types.MultiplierPathString.#ctor(System.String)" -->
        <member name="P:HotChocolate.Types.MultiplierPathString.Value">
            <summary>
            The name value.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.MultiplierPathString.HasValue">
            <summary>
            <c>true</c> if the name is not empty
            </summary>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.ToString">
            <summary>
            Provides the name string.
            </summary>
            <returns>The name string value</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Add(HotChocolate.Types.MultiplierPathString)">
            <summary>
            Appends a <see cref="T:HotChocolate.Types.MultiplierPathString"/> to this
            instance and returns a new instance of
            <see cref="T:HotChocolate.Types.MultiplierPathString"/> representing the combined
            <see cref="T:HotChocolate.Types.MultiplierPathString"/>.
            </summary>
            <returns>The combined <see cref="T:HotChocolate.Types.MultiplierPathString"/>.</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Equals(HotChocolate.Types.MultiplierPathString,System.StringComparison)">
            <summary>
            Compares this <see cref="T:HotChocolate.Types.MultiplierPathString"/> value
            to another value using a specific <see cref="T:System.StringComparison"/>
            type.
            </summary>
            <param name="other">
            The second <see cref="T:HotChocolate.Types.MultiplierPathString"/> for comparison.
            </param>
            <param name="comparisonType">
            The <see cref="T:System.StringComparison"/> type to use.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/> values
            are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Equals(HotChocolate.Types.MultiplierPathString)">
            <summary>
            Compares this <see cref="T:HotChocolate.Types.MultiplierPathString"/> value to
            another value using <see cref="F:System.StringComparison.Ordinal"/>
            comparison type.
            </summary>
            <param name="other">
            The second <see cref="T:HotChocolate.Types.MultiplierPathString"/> for comparison.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/>
            values are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.Equals(System.Object)">
            <summary>
            Compares this <see cref="T:HotChocolate.Types.MultiplierPathString"/> value to
            another value using <see cref="F:System.StringComparison.Ordinal"/>
            comparison.
            </summary>
            <param name="obj">
            The second <see cref="T:HotChocolate.Types.MultiplierPathString"/> for comparison.
            </param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/> values
            are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Types.MultiplierPathString"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in hashing
            algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Equality(HotChocolate.Types.MultiplierPathString,HotChocolate.Types.MultiplierPathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/>
            values are equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Inequality(HotChocolate.Types.MultiplierPathString,HotChocolate.Types.MultiplierPathString)">
            <summary>
            Operator call through to Equals
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            <c>true</c> if both <see cref="T:HotChocolate.Types.MultiplierPathString"/> values
            are not equal.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Addition(System.String,HotChocolate.Types.MultiplierPathString)">
            <summary>
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The ToString combination of both values</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Addition(HotChocolate.Types.MultiplierPathString,System.String)">
            <summary>
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>The ToString combination of both values</returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Addition(HotChocolate.Types.MultiplierPathString,HotChocolate.Types.MultiplierPathString)">
            <summary>
            Operator call through to Add
            </summary>
            <param name="left">The left parameter</param>
            <param name="right">The right parameter</param>
            <returns>
            The <see cref="T:HotChocolate.Types.MultiplierPathString"/> combination of both values
            </returns>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Implicit(System.String)~HotChocolate.Types.MultiplierPathString">
            <summary>
            Implicitly creates a new <see cref="T:HotChocolate.Types.MultiplierPathString"/> from
            the given string.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:HotChocolate.Types.MultiplierPathString.op_Implicit(HotChocolate.Types.MultiplierPathString)~System.String">
            <summary>
            Implicitly calls ToString().
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:HotChocolate.Types.IntrospectionAttribute">
            <summary>
            Defines that the annotated type is an internal intospection type.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.Middleware">
            <summary>
            Gets the field resolver middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.Resolver">
            <summary>
            Gets the field resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.SubscribeResolver">
            <summary>
            Gets the subscription resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.ExecutableDirectives">
            <summary>
            Gets all executable directives that are associated with this field.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ObjectField.Member">
            <summary>
            Gets the associated .net type member of this field.
            This member can be <c>null</c>.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ObjectField.GetMostSpecificResolver(HotChocolate.NameString,HotChocolate.Resolvers.FieldResolverDelegate,HotChocolate.Resolvers.FieldResolver)">
            <summary>
            Gets the most relevant overwrite of a resolver.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.ConnectionArguments.After">
            <summary>
            The cursor after which entities shall be taken.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.ConnectionArguments.Before">
            <summary>
            The cursor before which entities shall be taken.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Relay.IConnectionResolver.ResolveAsync(HotChocolate.Resolvers.IMiddlewareContext,System.Object,HotChocolate.Types.Relay.ConnectionArguments,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Resolves a connection for a pageable data source.
            </summary>
            <param name="context">
            The middleware context.
            </param>
            <param name="source">
            The data source.
            </param>        
            <param name="arguments">
            The connection arguments passed in from the query.
            </param>
            <param name="withTotalCount">
            The middleware requested a connection with a total count.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a connection which represents a page in the result set. 
            </returns>
        </member>
        <member name="M:HotChocolate.Types.Relay.IConnectionResolver`1.ResolveAsync(HotChocolate.Resolvers.IMiddlewareContext,`0,HotChocolate.Types.Relay.ConnectionArguments,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Resolves a connection for a pageable data source.
            </summary>
            <param name="context">
            The middleware context.
            </param>
            <param name="source">
            The data source.
            </param>
            <param name="arguments">
            The connection arguments passed in from the query.
            </param>
            <param name="withTotalCount">
            The middleware requested a connection with a total count.
            </param>
            <param name="cancellationToken">
            The cancellation token.
            </param>
            <returns>
            Returns a connection which represents a page in the result set. 
            </returns>
        </member>
        <member name="P:HotChocolate.Types.Relay.IEdge.Cursor">
            <summary>
            Gets the cursor which identifies the <see cref="P:HotChocolate.Types.Relay.IEdge.Node" /> in the current data set.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.Relay.IEdge.Node">
            <summary>
            Gets the node.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Relay.IIdSerializer.Serialize``1(HotChocolate.NameString,``0)">
            <summary>
            Creates a schema unique identifier from an ID and type name.
            </summary>
            <typeparam name="T">The id type.</typeparam>
            <param name="typeName">The type name.</param>
            <param name="id">The id.</param>
            <returns>
            Returns an ID string containing the type name and the ID.
            </returns>
            <exception cref="!:IdSerializationException">
            Unable to create a schema unique ID string.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.Relay.IIdSerializer.Serialize``1(HotChocolate.NameString,HotChocolate.NameString,``0)">
            <summary>
            Creates a schema unique identifier from a source schema name,
            an ID and type name.
            </summary>
            <typeparam name="T">The id type.</typeparam>
            <param name="schemaName">The schema name.</param>
            <param name="typeName">The type name.</param>
            <param name="id">The id.</param>
            <returns>
            Returns an ID string containing the type name and the ID.
            </returns>
            <exception cref="!:IdSerializationException">
            Unable to create a schema unique ID string.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.Relay.IIdSerializer.Deserialize(System.String)">
            <summary>
            Deserializes a schema unique identifier to reveal the source
            schema, internal ID and type name of an object.
            </summary>
            <param name="serializedId">
            The schema unique ID string.
            </param>
            <returns>
            Returns an <see cref="T:HotChocolate.Types.Relay.IdValue"/> containing the information
            encoded into the unique ID string.
            </returns>
            <exception cref="!:IdSerializationException">
            Unable to deconstruct the schema unique ID string.
            </exception>
        </member>
        <member name="T:HotChocolate.Types.Relay.INode">
            <summary>
            Marker interface for relay node types.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.BooleanType">
             <summary>
             The Boolean scalar type represents true or false.
            
             http://facebook.github.io/graphql/June2018/#sec-Boolean
             </summary>
        </member>
        <member name="M:HotChocolate.Types.BooleanType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.BooleanType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.FloatType">
             <summary>
             The Float scalar type represents signed double‐precision fractional
             values as specified by IEEE 754. Response formats that support an
             appropriate double‐precision number type should use that type to
             represent this scalar.
            
             http://facebook.github.io/graphql/June2018/#sec-Float
             </summary>
        </member>
        <member name="T:HotChocolate.Types.IdType">
             <summary>
             The ID scalar type represents a unique identifier, often used to refetch
             an object or as the key for a cache. The ID type is serialized in the
             same way as a String; however, it is not intended to be human‐readable.
            
             While it is often numeric, it should always serialize as a String.
            
             http://facebook.github.io/graphql/June2018/#sec-ID
             </summary>
        </member>
        <member name="M:HotChocolate.Types.IdType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.IdType"/> class.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.IntType">
             <summary>
             The Int scalar type represents a signed 32‐bit numeric non‐fractional
             value. Response formats that support a 32‐bit integer or a number type
             should use that type to represent this scalar.
            
             http://facebook.github.io/graphql/June2018/#sec-Int
             </summary>
        </member>
        <member name="T:HotChocolate.Types.Iso8601Duration">
            <summary>
            ISO 8601 Duration based on XsdDuration which include additional "Weeks" part
            https://github.com/dotnet/runtime/blob/master/src/libraries/System.Private.Xml/src/System/Xml/Schema/XsdDuration.cs
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Iso8601Duration.TryToTimeSpan(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,System.Nullable{System.TimeSpan}@)">
            <summary>
            Internal helper method that converts to a TimeSpan value. This code uses the estimate
            that there are 365 days in the year, 52 weeks in a year and 30 days in a month.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.Iso8601Duration.TryParseDigits(System.String,System.Int32@,System.Boolean,System.Int32@,System.Int32@)">
            Helper method that constructs an integer from leading digits starting at s[offset].  "offset" is
            updated to contain an offset just beyond the last digit.  The number of digits consumed is returned in
            cntDigits.  The integer is returned (0 if no digits).  If the digits cannot fit into an Int32:
              1. If eatDigits is true, then additional digits will be silently discarded (don't count towards numDigits)
              2. If eatDigits is false, an overflow exception is thrown
        </member>
        <member name="T:HotChocolate.Types.MultiplierPathType">
            <summary>
            The name scalar represents a valid GraphQL name as specified in the spec
            and can be used to refer to fields or types.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.NameType">
            <summary>
            The name scalar represents a valid GraphQL name as specified in the spec
            and can be used to refer to fields or types.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.ScalarType">
            <summary>
            Scalar types represent primitive leaf values in a GraphQL type system.
            GraphQL responses take the form of a hierarchical tree;
            the leaves on these trees are GraphQL scalars.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.#ctor(HotChocolate.NameString)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Types.ScalarType"/> class.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="P:HotChocolate.Types.ScalarType.Kind">
            <summary>
            Gets the type kind.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.ScalarType.ClrType">
            <summary>
            The .net type representation of this scalar.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.IsInstanceOfType(HotChocolate.Language.IValueNode)">
            <summary>
            Defines if the specified <paramref name="literal" />
            can be parsed by this scalar.
            </summary>
            <param name="literal">
            The literal that shall be checked.
            </param>
            <returns>
            <c>true</c> if the literal can be parsed by this scalar;
            otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="literal" /> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.IsInstanceOfType(System.Object)">
            <summary>
            Defines if the specified <paramref name="value" />
            is a instance of this type.
            </summary>
            <param name="value">
            A value representation of this type.
            </param>
            <returns>
            <c>true</c> if the value is a value of this type;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.ParseLiteral(HotChocolate.Language.IValueNode)">
            <summary>
            Parses the specified <paramref name="literal" />
            to the .net representation of this type.
            </summary>
            <param name="literal">
            The literal that shall be parsed.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="literal" /> is <c>null</c>.
            </exception>
            <exception cref="T:HotChocolate.Types.ScalarSerializationException">
            The specified <paramref name="literal" /> cannot be parsed
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.ParseValue(System.Object)">
            <summary>
            Parses the .net value representation to a value literal.
            </summary>
            <param name="value">
            The .net value representation.
            </param>
            <returns>
            Returns a GraphQL literal representing the .net value.
            </returns>
            <exception cref="T:HotChocolate.Types.ScalarSerializationException">
            The specified <paramref name="value" /> cannot be parsed
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.Serialize(System.Object)">
            <summary>
            Serializes the .net value representation.
            </summary>
            <param name="value">
            The .net value representation.
            </param>
            <returns>
            Returns the serialized value.
            </returns>
            <exception cref="T:HotChocolate.Types.ScalarSerializationException">
            The specified <paramref name="value" /> cannot be serialized
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.Deserialize(System.Object)">
            <summary>
            Deserializes the serialized value to it`s .net value representation.
            </summary>
            <param name="serialized">
            The serialized value representation.
            </param>
            <returns>
            Returns the .net value representation.
            </returns>
            <exception cref="T:HotChocolate.Types.ScalarSerializationException">
            The specified <paramref name="value" /> cannot be deserialized
            by this scalar.
            </exception>
        </member>
        <member name="M:HotChocolate.Types.ScalarType.TryDeserialize(System.Object,System.Object@)">
            <summary>
            Deserializes the serialized value to it`s .net value representation.
            </summary>
            <param name="value">
            The serialized value representation.
            </param>
            <returns>
            Returns the .net value representation.
            </returns>
        </member>
        <member name="T:HotChocolate.Types.SpecScalarAttribute">
            <summary>
            Defines that the annotated scalar type is defined
            in the GraphQL specification.
            </summary>
        </member>
        <member name="T:HotChocolate.Types.StringType">
             <summary>
             The String scalar type represents textual data, represented as
             UTF‐8 character sequences. The String type is most often used
             by GraphQL to represent free‐form human‐readable text.
            
             http://facebook.github.io/graphql/June2018/#sec-String
             </summary>
        </member>
        <member name="M:HotChocolate.Types.StringType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.StringType"/> class.
            </summary>
        </member>
        <member name="M:HotChocolate.Types.StringType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HotChocolate.Types.StringType"/> class.
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TimeSpanFormat.Iso8601">
            <summary>
            TimeSpan ISO 8601 Format
            https://tools.ietf.org/html/rfc3339
            </summary>
        </member>
        <member name="F:HotChocolate.Types.TimeSpanFormat.DotNet">
            <summary>
            TimeSpan .NET Constant ("c") Format
            https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings#the-constant-c-format-specifier
            </summary>
        </member>
        <member name="P:HotChocolate.Types.TypeSystemObjectBase.Name">
            <summary>
            Gets the GraphQL type name.
            </summary>
        </member>
        <member name="P:HotChocolate.Types.TypeSystemObjectBase.Description">
            <summary>
            Gets the optional description of this scalar type.
            </summary>
        </member>
        <member name="T:HotChocolate.DataLoader.IDataLoaderRegistry">
            <summary>
            The DataLoader-registry holds the instances of DataLoaders
            that are used by the execution engine.
            </summary>
        </member>
        <member name="M:HotChocolate.DataLoader.IDataLoaderRegistry.Register``1(System.String,System.Func{System.IServiceProvider,``0})">
            <summary>
            Registers a new DataLoader with this registry.
            </summary>
            <param name="key">
            The key with which this DataLoader can be resolved.
            </param>
            <param name="factory">
            The factory that can create a instance of the DataLoader
            when it is needed.
            </param>
            <typeparam name="T">
            The DataLoader type.
            </typeparam>
            <returns>
            Returns <c>true</c> if a DataLoader was successfully
            registered for the specified <paramref name="key"/>;
            otherwise, <c>false</c> will be returned.
            </returns>
        </member>
        <member name="M:HotChocolate.DataLoader.IDataLoaderRegistry.TryGet``1(System.String,``0@)">
            <summary>
            Tries to retrieve a DataLoader with the specified
            <paramref name="key" />.
            </summary>
            <param name="key">
            The key with which this DataLoader can be resolved.
            </param>
            <param name="dataLoader">
            The retrieved DataLoader instance or <c>null</c>
            if there is no DataLoader registered for the specified
            <paramref name="key" />.
            </param>
            <typeparam name="T">
            The DataLoader type.
            </typeparam>
            <returns>
            Returns <c>true</c> if a DataLoader was resolved;
            otherwise, <c>false</c> will be returned.
            </returns>
        </member>
        <member name="T:HotChocolate.Resolvers.Expressions.ResolverDescriptor">
            <summary>
            Describes a resolver that is based on a resolver type.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IDirectiveContext">
            <summary>
            The directive context represent the execution context for a specific
            directive middleware that is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IDirectiveContext.Directive">
            <summary>
            Gets the directive that is being executed.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IFieldReference">
            <summary>
            A reference to a specific field of a GraphQL schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldReference.TypeName">
            <summary>
            The name of a GraphQL object type.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IFieldReference.FieldName">
            <summary>
            The name of a field of the object type.
            </summary>
        </member>
        <member name="T:HotChocolate.Resolvers.IMiddlewareContext">
            <summary>
            The middleware context represent the execution context for a field
            middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IMiddlewareContext.Result">
            <summary>
            Gets or sets the result of the middleware.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IMiddlewareContext.IsResultModified">
            <summary>
            Defines if at least one middleware has modified the result.
            </summary>
            <value></value>
        </member>
        <member name="M:HotChocolate.Resolvers.IMiddlewareContext.ResolveAsync``1">
            <summary>
            Executes the field resolver and returns its result.
            </summary>
            <typeparam name="T">
            The type to which the result shall be casted.
            </typeparam>
            <returns>
            Returns the resolved field value.
            </returns>
        </member>
        <member name="T:HotChocolate.Resolvers.IResolverContext">
            <summary>
            The resolver context represent the execution context for a specific
            field that is being resolved.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Schema">
            <summary>
            Gets the GraphQL schema on which the query is executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.RootType">
            <summary>
            Gets the root object type of the currently execution operation.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.ObjectType">
            <summary>
            Gets the object type on which the field resolver is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Field">
            <summary>
            Gets the field on which the field resolver is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Document">
            <summary>
            Gets the parsed query document that is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Operation">
            <summary>
            Gets the operation from the query that is being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.FieldSelection">
            <summary>
            Gets the field selection for which a field resolver is
            being executed.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.ResponseName">
            <summary>
            Gets the name that the field will have in the response map.
            </summary>
            <value></value>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Source">
            <summary>
            Gets the source stack containing all previous resolver results
            of the current execution path.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Path">
            <summary>
            Gets the current execution path.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.ScopedContextData">
            <summary>
            The scoped context data dictionary can be used by middlewares and
            resolvers to store and retrieve data during execution scoped to the
            hierarchy
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.Variables">
            <summary>
            Gets access to the coerced variable values of the request.
            </summary>
        </member>
        <member name="P:HotChocolate.Resolvers.IResolverContext.RequestAborted">
            <summary>
            Notifies when the connection underlying this request is aborted
            and thus request operations should be cancelled.
            </summary>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.Parent``1">
            <summary>
            Gets the previous (parent) resolver result.
            </summary>
            <typeparam name="T">
            The type to which the result shall be casted.
            </typeparam>
            <returns>
            Returns the previous (parent) resolver result.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.Argument``1(HotChocolate.NameString)">
            <summary>
            Gets a specific field argument.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <typeparam name="T">
            The type to which the argument shall be casted to.
            </typeparam>
            <returns>
            Returns the value of the specified field argument.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.ArgumentKind(HotChocolate.NameString)">
            <summary>
            Gets the value kind of a specific field argument.
            </summary>
            <param name="name">
            The argument name.
            </param>
            <returns>
            Returns the value kind of the specified field argument kind.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.Service``1">
            <summary>
            Gets as specific service from the dependency injection container.
            </summary>
            <typeparam name="T">
            The service type.
            </typeparam>
            <returns>
            Returns the specified service.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.Service(System.Type)">
            <summary>
            Gets as specific service from the dependency injection container.
            </summary>
            <param name="service">The service type.</param>
            <returns>
            Returns the specified service.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.CustomProperty``1(System.String)">
            <summary>
            Gets a custom request property that was provided with the request.
            </summary>
            <typeparam name="T">
            The property value type.
            </typeparam>
            <returns>
            Returns the value of the custom request property.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.Resolver``1">
            <summary>
            Gets a resolver object containing one or more resolvers.
            </summary>
            <typeparam name="T">
            The type of the resolver object.
            </typeparam>
            <returns>
            Returns a resolver object containing one or more resolvers.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.ReportError(System.String)">
            <summary>
            Report a non-terminating resolver error to the execution engine.
            The error will be displayed in the errorsection with a reference to
            the field selection that is associated with the current
            resolver context.
            </summary>
            <param name="errorMessage">
            The error message.
            </param>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.ReportError(HotChocolate.IError)">
            <summary>
            Report a non-terminating resolver error to the execution engine.
            The error will be displayed in the errorsection with a reference to
            the field selection that is associated with the current
            resolver context.
            </summary>
            <param name="errorMessage">
            The error message.
            </param>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.CollectFields(HotChocolate.Types.ObjectType)">
            <summary>
            Collects the fields of the next level with the specified
            type context.
            </summary>
            <param name="typeContext">The object type context.</param>
            <returns>
            Returns the fields that would be selected if this resolver
            returns an object of the specified typeContext.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.CollectFields(HotChocolate.Types.ObjectType,HotChocolate.Language.SelectionSetNode)">
            <summary>
            Collects the fields of a selection set with the specified
            type context.
            </summary>
            <param name="typeContext">The object type context.</param>
            <param name="selectionSet">
            The selection set that shall be analyzed.
            </param>
            <returns>
            Returns the fields that would be selected if this resolver
            returns an object of the specified typeContext.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.CollectFields(HotChocolate.Types.ObjectType,HotChocolate.Language.SelectionSetNode,HotChocolate.Path)">
            <summary>
            Collects the fields of a selection set with the specified
            type context.
            </summary>
            <param name="typeContext">The object type context.</param>
            <param name="selectionSet">
            The selection set that shall be analyzed.
            </param>
            <param name="path">
            The field path.
            </param>
            <returns>
            Returns the fields that would be selected if this resolver
            returns an object of the specified typeContext.
            </returns>
        </member>
        <member name="M:HotChocolate.Resolvers.IResolverContext.ModifyScopedContext(HotChocolate.Resolvers.ModifyScopedContext)">
            <summary>
            Helper method to modify the scoped context data.
            </summary>
        </member>
        <member name="T:HotChocolate.Properties.TypeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Argument_TypeIsNull">
            <summary>
              Looks up a localized string similar to The argument `{0}` has no type. Specify the type with `.Argument(&quot;{0}&quot;, a.Type&lt;MyType&gt;())` to fix this issue..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ArgumentDescriptor_InputTypeViolation">
            <summary>
              Looks up a localized string similar to The argument type has to be an input-type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ArgumentValueBuilder_NonNull">
            <summary>
              Looks up a localized string similar to Argument `{0}` of non-null type `{1}` must not be null..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.BooleanType_Description">
            <summary>
              Looks up a localized string similar to The `Boolean` scalar type represents `true` or `false`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ByteType_Description">
            <summary>
              Looks up a localized string similar to The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ClrTypeReference_OnlyTsosAreAllowed">
            <summary>
              Looks up a localized string similar to Only type system objects are allowed..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ComplexTypeBindingBuilder_FieldBuilderNotSupported">
            <summary>
              Looks up a localized string similar to The specified IComplexTypeFieldBindingBuilder-implementation is not supported..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ComplexTypeBindingBuilder_FieldNotComplete">
            <summary>
              Looks up a localized string similar to The field binding builder is not completed and cannot be added..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DataLoaderRegistry_KeyNullOrEmpty">
            <summary>
              Looks up a localized string similar to The DataLoader key cannot be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DataLoaderResolverContextExtensions_RegistryIsNull">
            <summary>
              Looks up a localized string similar to No DataLoader registry was registerd with your dependency injection..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DataLoaderResolverContextExtensions_UnableToRegister">
            <summary>
              Looks up a localized string similar to Unable to register a DataLoader with your DataLoader registry..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DateTimeType_Description">
            <summary>
              Looks up a localized string similar to The `DateTime` scalar represents an ISO-8601 compliant date time type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DateType_Description">
            <summary>
              Looks up a localized string similar to The `Date` scalar represents an ISO-8601 compliant date type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DecimalType_Description">
            <summary>
              Looks up a localized string similar to The built-in `Decimal` scalar type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DefaultTypeInspector_MemberInvalid">
            <summary>
              Looks up a localized string similar to The specified member has to be a method or a property..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DependencyDescriptorBase_OnlyTsoIsAllowed">
            <summary>
              Looks up a localized string similar to Only type system objects are allowed as schema type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Directive_Description">
             <summary>
               Looks up a localized string similar to A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.
            
            In some cases, you need to provide options to alter GraphQL&apos;s execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor..
             </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Directive_UseLocation">
            <summary>
              Looks up a localized string similar to Use `locations`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveCollection_DirectiveIsUnique">
            <summary>
              Looks up a localized string similar to The specified directive `@{0}` is unique and cannot be added twice..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveCollection_LocationNotAllowed">
            <summary>
              Looks up a localized string similar to The specified directive `@{0}` is not allowed on the current location `{1}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_ArgumentDefinition">
            <summary>
              Looks up a localized string similar to Location adjacent to an argument definition.
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Description">
            <summary>
              Looks up a localized string similar to A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Enum">
            <summary>
              Looks up a localized string similar to Location adjacent to an enum definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_EnumValue">
            <summary>
              Looks up a localized string similar to Location adjacent to an enum value definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Field">
            <summary>
              Looks up a localized string similar to Location adjacent to a field..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_FieldDefinition">
            <summary>
              Looks up a localized string similar to Location adjacent to a field definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_FragmentDefinition">
            <summary>
              Looks up a localized string similar to Location adjacent to a fragment definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_FragmentSpread">
            <summary>
              Looks up a localized string similar to Location adjacent to a fragment spread..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_InlineFragment">
            <summary>
              Looks up a localized string similar to Location adjacent to an inline fragment..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_InputFieldDefinition">
            <summary>
              Looks up a localized string similar to Location adjacent to an input object field definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_InputObject">
            <summary>
              Looks up a localized string similar to Location adjacent to an input object type definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Interface">
            <summary>
              Looks up a localized string similar to Location adjacent to an interface definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Mutation">
            <summary>
              Looks up a localized string similar to Location adjacent to a mutation operation..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Object">
            <summary>
              Looks up a localized string similar to Location adjacent to an object type definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Query">
            <summary>
              Looks up a localized string similar to Location adjacent to a query operation..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Scalar">
            <summary>
              Looks up a localized string similar to Location adjacent to a scalar definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Schema">
            <summary>
              Looks up a localized string similar to Location adjacent to a schema definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Subscription">
            <summary>
              Looks up a localized string similar to Location adjacent to a subscription operation..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveLocation_Union">
            <summary>
              Looks up a localized string similar to Location adjacent to a union definition..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveType_NoLocations">
            <summary>
              Looks up a localized string similar to The `{0}` directive does not declare any location on which it is valid..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveType_ReplaceWithUse">
            <summary>
              Looks up a localized string similar to Replace Middleware with `Use`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveType_UnableToConvert">
            <summary>
              Looks up a localized string similar to Unable to convert the argument value to the specified type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveTypeDescriptor_OnlyProperties">
            <summary>
              Looks up a localized string similar to Only property expressions are allowed to describe a directive type argument..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.DirectiveTypeFactory_LocationNotSupported">
            <summary>
              Looks up a localized string similar to The specified location `{0}` is not supported..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Edge_CursorIsNull">
            <summary>
              Looks up a localized string similar to The cursor cannot be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.EnumType_NoValues">
            <summary>
              Looks up a localized string similar to The enum type `{0}` has no values..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.EnumTypeExtension_CannotMerge">
            <summary>
              Looks up a localized string similar to The enum type extension can only be merged with an enum type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.EnumTypeExtension_ValueTypeInvalid">
            <summary>
              Looks up a localized string similar to The enum value `{0}` of the enum type extension is not assignabe with the target enum type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.EnumValue_Description">
            <summary>
              Looks up a localized string similar to One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.EnumValue_ValueIsNull">
            <summary>
              Looks up a localized string similar to The inner value of enum value cannot be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Field_Description">
            <summary>
              Looks up a localized string similar to Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.FieldInitHelper_InvalidDefaultValue">
            <summary>
              Looks up a localized string similar to Could not parse the native value of input field `{0}.{1}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.FieldInitHelper_NoFields">
            <summary>
              Looks up a localized string similar to {0} `{1}` has no fields declared..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.FloatType_Description">
            <summary>
              Looks up a localized string similar to The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point)..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.IdType_Description">
            <summary>
              Looks up a localized string similar to The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `&quot;4&quot;`) or integer (such as `4`) input value will be accepted as an ID..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InputField_CannotSetValue">
            <summary>
              Looks up a localized string similar to Unable to set the input field value..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InputObjectType_CannotParseLiteral">
            <summary>
              Looks up a localized string similar to The input object type can only parse object value literals..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InputObjectType_NoFields">
            <summary>
              Looks up a localized string similar to The input object `{0}` does not have any fields..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InputObjectTypeExtension_CannotMerge">
            <summary>
              Looks up a localized string similar to The input object type extension can only be merged with an input object type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InputTypeNonNullCheck_ValueIsNull">
            <summary>
              Looks up a localized string similar to The input value of type `{0}` must not be null..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InputValue_DefaultValue">
            <summary>
              Looks up a localized string similar to A GraphQL-formatted string representing the default value for this input value..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InputValue_Description">
            <summary>
              Looks up a localized string similar to Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InterfaceImplRule_ArgumentsDontMatch">
            <summary>
              Looks up a localized string similar to The arguments of the interface field {0} from interface {1} and {2} do not match and are implemented by object type {3}..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InterfaceImplRule_ArgumentsNotImpl">
            <summary>
              Looks up a localized string similar to Object type {0} does not implement all arguments of field {1} from interface {2}..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InterfaceImplRule_FieldNotImpl">
            <summary>
              Looks up a localized string similar to Object type {0} does not implement the field {1} from interface {2}..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InterfaceImplRule_FieldTypeInvalid">
            <summary>
              Looks up a localized string similar to The return type of the interface field {0} from interface {1} and {2} do not match and are implemented by object type {3}..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InterfaceImplRule_ReturnTypeInvalid">
            <summary>
              Looks up a localized string similar to The return type of the interface field {0} does not match the field declared by object type {1}..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.InterfaceTypeExtension_CannotMerge">
            <summary>
              Looks up a localized string similar to The interface type extension can only be merged with an interface type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.IntType_Description">
            <summary>
              Looks up a localized string similar to The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.LongType_Description">
            <summary>
              Looks up a localized string similar to The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.MultiplierPathType_Description">
            <summary>
              Looks up a localized string similar to The multiplier path scalar represents a valid GraphQL multiplier path string..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Name_Cannot_BeEmpty">
            <summary>
              Looks up a localized string similar to The multiplier path scalar represents a valid GraphQL multiplier path string..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.NameType_Description">
            <summary>
              Looks up a localized string similar to The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.NonNullType_NotAnInputType">
            <summary>
              Looks up a localized string similar to The specified type is not an input type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.NonNullType_TypeIsNunNullType">
            <summary>
              Looks up a localized string similar to The inner type of non-null type must be a nullable type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.NonNullType_ValueIsNull">
            <summary>
              Looks up a localized string similar to A non null type cannot parse null value literals..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ObjectFieldDescriptorBase_FieldType">
            <summary>
              Looks up a localized string similar to The field-type must be an output-type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ObjectTypeDescriptor_InterfaceBaseClass">
            <summary>
              Looks up a localized string similar to The interface base class cannot be used as interface implementation declaration..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ObjectTypeDescriptor_MustBePropertyOrMethod">
            <summary>
              Looks up a localized string similar to A field-expression must be a property-expression or a method-call-expression..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ObjectTypeDescriptor_Resolver_SchemaType">
            <summary>
              Looks up a localized string similar to Schema types cannot be used as resolver types..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ObjectTypeExtension_CannotMerge">
            <summary>
              Looks up a localized string similar to The object type extension can only be merged with an object type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Reflection_MemberMust_BeMethodOrProperty">
            <summary>
              Looks up a localized string similar to The member expression must specify a property or method that is public and that belongs to the type {0}.
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ResolverCompiler_ParentPropertyDoesNotExists">
            <summary>
              Looks up a localized string similar to The property `{0}` cannot be injected into the resolver. `{0}` does not exist on type `{1}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ResolverCompiler_ParentPropertyHasWrongType">
            <summary>
              Looks up a localized string similar to The type of property `{0}` is invalid. `{1}` is not assignable to `{2}`. .
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ResolverCompiler_ParentPropertyInvalidSource">
            <summary>
              Looks up a localized string similar to The parent of the resolver is of type object. No property can be selected. Parent properties can only be injected in ObjectType&lt;T&gt;..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ResolverCompiler_UnknownParameterType">
            <summary>
              Looks up a localized string similar to A directive type mustn&apos;t be one of the base classes `DirectiveType` or `DirectiveType&lt;T&gt;` but must be a type inheriting from `DirectiveType` or `DirectiveType&lt;T&gt;`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ResolverTypeBindingBuilder_FieldBuilderNotSupported">
            <summary>
              Looks up a localized string similar to The specified IResolverFieldBindingBuilder-implementation is not supported..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ResolverTypeBindingBuilder_FieldNotComplete">
            <summary>
              Looks up a localized string similar to The field binding builder is not completed and cannot be added..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Scalar_Cannot_Deserialize">
            <summary>
              Looks up a localized string similar to {0} cannot deserialize the given value..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Scalar_Cannot_ParseLiteral">
            <summary>
              Looks up a localized string similar to {0} cannot parse the given literal of type `{1}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Scalar_Cannot_ParseValue">
            <summary>
              Looks up a localized string similar to {0} cannot parse the given value of type `{1}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Scalar_Cannot_Serialize">
            <summary>
              Looks up a localized string similar to {0} cannot serialize the given value..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Schema_Description">
            <summary>
              Looks up a localized string similar to A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Schema_Directives">
            <summary>
              Looks up a localized string similar to A list of all directives supported by this server..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Schema_MutationType">
            <summary>
              Looks up a localized string similar to If this server supports mutation, the type that mutation operations will be rooted at..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Schema_QueryType">
            <summary>
              Looks up a localized string similar to The type that query operations will be rooted at..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Schema_SubscriptionType">
            <summary>
              Looks up a localized string similar to If this server support subscription, the type that subscription operations will be rooted at..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Schema_Types">
            <summary>
              Looks up a localized string similar to A list of all types supported by this server..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_Binding_CannotBeHandled">
            <summary>
              Looks up a localized string similar to There is no handler registered that can handle the specified schema binding..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_Binding_Invalid">
            <summary>
              Looks up a localized string similar to The schema binding is not valid..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_ISchemaNotTso">
            <summary>
              Looks up a localized string similar to The given schema has to inherit from TypeSystemObjectBase in order to be initializable..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_MustBeSchemaType">
            <summary>
              Looks up a localized string similar to schemaType must be a schema type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_NoQueryType">
            <summary>
              Looks up a localized string similar to The schema builder was unable to identify the query type of the schema. Either specify which type is the query type or set the schema builder to non-strict validation mode..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_RootType_MustBeClass">
            <summary>
              Looks up a localized string similar to A root type must be a class..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_RootType_MustBeObjectType">
            <summary>
              Looks up a localized string similar to A root type must be an object type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_RootType_NonGenericType">
            <summary>
              Looks up a localized string similar to Non-generic schema types are not allowed..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilder_SchemaTypeInvalid">
            <summary>
              Looks up a localized string similar to The given schema has to inherit from `Schema` in order to be initializable..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilderExtensions_DirectiveTypeIsBaseType">
            <summary>
              Looks up a localized string similar to A directive type mustn&apos;t be one of the base classes `DirectiveType` or `DirectiveType&lt;T&gt;` but must be a type inheriting from `DirectiveType` or `DirectiveType&lt;T&gt;`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilderExtensions_MustBeDirectiveType">
            <summary>
              Looks up a localized string similar to A directive type must inherit from `DirectiveType` or `DirectiveType&lt;T&gt;`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaBuilderExtensions_SchemaIsEmpty">
            <summary>
              Looks up a localized string similar to The schema string cannot be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaErrorBuilder_MessageIsNull">
            <summary>
              Looks up a localized string similar to The error message mustn&apos;t be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaField_Description">
            <summary>
              Looks up a localized string similar to Access the current type schema of this server..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.SchemaSyntaxVisitor_UnknownOperationType">
            <summary>
              Looks up a localized string similar to Unknown operation type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.ShortType_Description">
            <summary>
              Looks up a localized string similar to The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.String_Argument_NullOrEmpty">
            <summary>
              Looks up a localized string similar to The `{0}` cannot be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.StringType_Description">
            <summary>
              Looks up a localized string similar to The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.Type_Description">
             <summary>
               Looks up a localized string similar to The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.
            
            Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name and description, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose othe [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeConfiguration_ConfigureIsNull">
            <summary>
              Looks up a localized string similar to The configuration delegate mustn&apos;t be null..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeConfiguration_DefinitionIsNull">
            <summary>
              Looks up a localized string similar to Definition mustn&apos;t be null..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeConvertion_ConvertNotSupported">
            <summary>
              Looks up a localized string similar to Unable to convert type from `{0}` to `{1}`.
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeDependency_MustBeSchemaType">
            <summary>
              Looks up a localized string similar to The specified type is not a schema type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeExtensions_InvalidStructure">
            <summary>
              Looks up a localized string similar to The type structure is invalid..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeExtensions_KindIsNotSupported">
            <summary>
              Looks up a localized string similar to The specified type kind is not supported..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeExtensions_NoListType">
            <summary>
              Looks up a localized string similar to The specified type is not a valid list type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeExtensions_TypeIsNotOfT">
            <summary>
              Looks up a localized string similar to The given type is not a {0}..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeField_Description">
            <summary>
              Looks up a localized string similar to Request the type information of a single type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeInitializer_CannotResolveDependency">
            <summary>
              Looks up a localized string similar to Unable to resolve dependencies {1} for type `{0}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeInitializer_CompleteName_Duplicate">
            <summary>
              Looks up a localized string similar to The name `{0}` was already registered by another type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeInitializer_Merge_KindDoesNotMatch">
            <summary>
              Looks up a localized string similar to The kind of the extension does not match the kind of the type `{0}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeInitializer_ParentPropertyNotAllowedInExtResolver">
            <summary>
              Looks up a localized string similar to The member {0} of type {1} is invalid. Parent property selections are not allowed in external resolvers!.
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_Description">
            <summary>
              Looks up a localized string similar to An enum describing what kind of type a given `__Type` is..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_Enum">
            <summary>
              Looks up a localized string similar to Indicates this type is an enum. `enumValues` is a valid field..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_InputObject">
            <summary>
              Looks up a localized string similar to Indicates this type is an input object. `inputFields` is a valid field..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_Interface">
            <summary>
              Looks up a localized string similar to Indicates this type is an interface. `fields` and `possibleTypes` are valid fields..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_List">
            <summary>
              Looks up a localized string similar to Indicates this type is a list. `ofType` is a valid field..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_NonNull">
            <summary>
              Looks up a localized string similar to Indicates this type is a non-null. `ofType` is a valid field..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_Object">
            <summary>
              Looks up a localized string similar to Indicates this type is an object. `fields` and `interfaces` are valid fields..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_Scalar">
            <summary>
              Looks up a localized string similar to Indicates this type is a scalar..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeKind_Union">
            <summary>
              Looks up a localized string similar to Indicates this type is a union. `possibleTypes` is a valid field..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeNameField_Description">
            <summary>
              Looks up a localized string similar to The name of the current Object type at runtime..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeNameHelper_InvalidTypeStructure">
            <summary>
              Looks up a localized string similar to Invalid type structure..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeNameHelper_OnlyTsosAreAllowed">
            <summary>
              Looks up a localized string similar to Only type system objects are allowed as dependency..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeRegistrar_TypesInconsistent">
            <summary>
              Looks up a localized string similar to Unable to infer or resolve a schema type from the type reference `{0}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeResourceHelper_TypeNameEmptyOrNull">
            <summary>
              Looks up a localized string similar to The typeName mustn&apos;t be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeSystemObject_DescriptionImmutable">
            <summary>
              Looks up a localized string similar to The description becomes immutable once it was assigned..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeSystemObject_NameImmutable">
            <summary>
              Looks up a localized string similar to The name becomes immutable once it was assigned..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeSystemObjectBase_DefinitionIsNull">
            <summary>
              Looks up a localized string similar to The type definition is null which means that the type was initialized incorrectly..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.TypeSystemObjectBase_NameIsNull">
             <summary>
               Looks up a localized string similar to The type name was not completed correctly and is still empty. Type names are not allowed to remain empty after name completion was executed.
            Type: `{0}`.
             </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.UnionType_MustHaveTypes">
            <summary>
              Looks up a localized string similar to A Union type must define one or more unique member types..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.UnionType_UnableToResolveType">
            <summary>
              Looks up a localized string similar to Unable to resolve the specified type reference..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.UnionTypeExtension_CannotMerge">
            <summary>
              Looks up a localized string similar to The union type extension can only be merged with an union type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.VariableValueBuilder_InputType">
            <summary>
              Looks up a localized string similar to Variable `{0}` of type `{1}` must be an input type..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.VariableValueBuilder_InvalidValue">
            <summary>
              Looks up a localized string similar to Variable `{0}` got invalid value..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.VariableValueBuilder_NodeKind">
            <summary>
              Looks up a localized string similar to The type node kind is not supported..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.VariableValueBuilder_NonNull">
            <summary>
              Looks up a localized string similar to Variable `{0}` of type `{1}` must not be null..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.VariableValueBuilder_NonNull_In_Graph">
            <summary>
              Looks up a localized string similar to Detected non-null violation in variable `{0}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Properties.TypeResources.VariableValueBuilder_VarNameEmpty">
            <summary>
              Looks up a localized string similar to Variable name mustn&apos;t be null or empty..
            </summary>
        </member>
        <member name="T:HotChocolate.Schema">
            <summary>
            A GraphQL Schema defines the capabilities of a GraphQL server. It
            exposes all available types and directives on the server, as well as
            the entry points for query, mutation, and subscription operations.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.Services">
            <summary>
            Gets the global schema services.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.QueryType">
            <summary>
            The type that query operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.MutationType">
            <summary>
            If this server supports mutation, the type that
            mutation operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.SubscriptionType">
            <summary>
            If this server support subscription, the type that
            subscription operations will be rooted at.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.Types">
            <summary>
            Gets all the schema types.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.DirectiveTypes">
            <summary>
            Gets all the directives that are supported by this schema.
            </summary>
        </member>
        <member name="P:HotChocolate.Schema.DefaultName">
            <summary>
            Gets the default schema name.
            </summary>
        </member>
        <member name="M:HotChocolate.Schema.GetType``1(HotChocolate.NameString)">
            <summary>
            Gets a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <returns>The type.</returns>
            <exception cref="T:System.ArgumentException">
            The specified type does not exist or
            is not of the specified type kind.
            </exception>
        </member>
        <member name="M:HotChocolate.Schema.TryGetType``1(HotChocolate.NameString,``0@)">
            <summary>
            Tries to get a type by its name and kind.
            </summary>
            <typeparam name="T">The expected type kind.</typeparam>
            <param name="typeName">The name of the type.</param>
            <param name="type">The resolved type.</param>
            <returns>
            <c>true</c>, if a type with the name exists and is of the specified
            kind, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.TryGetClrType(HotChocolate.NameString,System.Type@)">
            <summary>
            Tries to get the .net type representation of a schema.
            </summary>
            <param name="typeName">The name of the type.</param>
            <param name="clrType">The resolved .net type.</param>
            <returns>
            <c>true</c>, if a .net type was found that was bound
            the the specified schema type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.GetPossibleTypes(HotChocolate.Types.INamedType)">
            <summary>
            Gets the possible object types to
            an abstract type (union type or interface type).
            </summary>
            <param name="abstractType">The abstract type.</param>
            <returns>
            Returns a collection with all possible object types
            for the given abstract type.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.GetDirectiveType(HotChocolate.NameString)">
            <summary>
            Gets a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <returns>
            Returns directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </returns>
        </member>
        <member name="M:HotChocolate.Schema.TryGetDirectiveType(HotChocolate.NameString,HotChocolate.Types.DirectiveType@)">
            <summary>
            Tries to get a directive type by its name.
            </summary>
            <param name="directiveName">
            The directive name.
            </param>
            <param name="directiveType">
            The directive type that was resolved by the given name
            or <c>null</c> if there is no directive with the specified name.
            </param>
            <returns>
            <c>true</c>, if a directive type with the specified
            name exists; otherwise, <c>false</c>.
            </returns>
        </member>
    </members>
</doc>
