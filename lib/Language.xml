<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HotChocolate.Language</name>
    </assembly>
    <members>
        <member name="M:HotChocolate.Language.BooleanValueNode.Equals(HotChocolate.Language.BooleanValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.BooleanValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.BooleanValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.BooleanValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.BooleanValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.BooleanValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.BooleanValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.BooleanValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.BooleanValueNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.BooleanValueNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.EnumValueNode">
             <summary>
             Represents a enum value literal.
            
             http://facebook.github.io/graphql/June2018/#sec-Enum-Value
             </summary>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.Equals(HotChocolate.Language.EnumValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.EnumValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.EnumValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.EnumValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.EnumValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.EnumValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.EnumValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.EnumValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.EnumValueNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.EnumValueNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.Equals(HotChocolate.Language.FloatValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.FloatValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.FloatValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.FloatValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.FloatValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.FloatValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.FloatValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.FloatValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.FloatValueNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.FloatValueNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.Equals(HotChocolate.Language.IntValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IntValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IntValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IntValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.IntValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.IntValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.IntValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.IntValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.IntValueNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.IntValueNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.Equals(HotChocolate.Language.ListValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.ListValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.ListValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.ListValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ListValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ListValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.ListValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.ListValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ListValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.ListValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="P:HotChocolate.Language.Location.Start">
            <summary>
            Gets the character offset at which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> begins.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Location.End">
            <summary>
            Gets the character offset at which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> ends.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Location.Line">
            <summary>
            Gets the 1-indexed line number on which this
            <see cref="T:HotChocolate.Language.SyntaxToken" /> appears.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Location.Column">
            <summary>
            Gets the 1-indexed column number at which this
            <see cref="T:HotChocolate.Language.SyntaxToken" /> begins.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.NameNode.Equals(HotChocolate.Language.NameNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.NameNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.NameNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.NameNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.NameNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.NameNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NameNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.NameNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.NameNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.NameNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.NameNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.NameNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.NameNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.Equals(HotChocolate.Language.NullValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.NullValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.NullValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.NullValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NullValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.NullValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.NullValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.NullValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NullValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.NullValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.Equals(HotChocolate.Language.ObjectFieldNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.ObjectFieldNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.ObjectFieldNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.ObjectFieldNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ObjectFieldNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.ObjectFieldNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.ObjectFieldNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectFieldNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.ObjectFieldNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.Equals(HotChocolate.Language.ObjectValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.ObjectValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.ObjectValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.ObjectValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ObjectValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.ObjectValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.ObjectValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.ObjectValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.ObjectValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.ObjectValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.StringValueNode">
             <summary>
             Represents a string value literal.
            
             http://facebook.github.io/graphql/June2018/#sec-String-Value
             </summary>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.StringValueNode"/> class.
            </summary>
            <param name="value">The string value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.#ctor(HotChocolate.Language.Location,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.StringValueNode"/> class.
            </summary>
            <param name="location">The source location.</param>
            <param name="value">The string value.</param>
            <param name="block">
            If set to <c>true</c> this instance represents a block string.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:HotChocolate.Language.StringValueNode.Block">
            <summary>
            Gets a value indicating whether this <see cref="T:HotChocolate.Language.StringValueNode"/>
            was parsed from a block string.
            </summary>
            <value>
            <c>true</c> if this string value was parsed from a block string;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.Equals(HotChocolate.Language.StringValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.StringValueNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.StringValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.StringValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.StringValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.StringValueNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.StringValueNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.StringValueNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.StringValueNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.StringValueNode"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.Equals(HotChocolate.Language.VariableNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.VariableNode"/>
            is equal to the current <see cref="T:HotChocolate.Language.VariableNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.VariableNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.VariableNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.VariableNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.VariableNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.Equals(HotChocolate.Language.IValueNode)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.VariableNode"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.IValueNode"/> to compare with the current
            <see cref="T:HotChocolate.Language.VariableNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.IValueNode"/> is equal
            to the current <see cref="T:HotChocolate.Language.VariableNode"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to
            the current <see cref="T:HotChocolate.Language.VariableNode"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.VariableNode"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:HotChocolate.Language.VariableNode"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:HotChocolate.Language.VariableNode"/>
            object.
            </summary>
            <returns>
            A hash code for this instance that is suitable for use in
            hashing algorithms and data structures such as a hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.VariableNode.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.VariableNode"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.VariableNode"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.CharExtensions">
            <summary>
            This class provides internal char utilities
            that are used to tokenize a GraphQL source text.
            These utilities are used by the lexer dfault implementation.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ISource">
            <summary>
            Represents a GraphQL source.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ISource.Text">
            <summary>
            Gets the GraphQL source text.
            </summary>
            <returns>
            Returns the GraphQL source text.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.Lexer">
            <summary>
            Represents the GraphQL lexer.
            The lexer tokenizes a GraphQL <see cref="T:HotChocolate.Language.ISource" />
            and returns the first token.
            The tokens are chained as a a doubly linked syntax token chain.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Lexer.Read(HotChocolate.Language.ISource)">
            <summary>
            Reads <see cref="T:HotChocolate.Language.SyntaxToken" />s from a GraphQL
            <paramref name="source" /> and returns the first token.
            </summary>
            <param name="source">
            The GraphQL source that shall be tokenized.
            </param>
            <returns>
            Returns the first token of the given
            GraphQL <paramref name="source" />.
            </returns>
            <exception cref="T:HotChocolate.Language.SyntaxException">
            There are unexpected tokens in the given <paramref name="source" />.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source" /> is null.
            </exception>
        </member>
        <member name="M:HotChocolate.Language.Lexer.ReadNextToken(HotChocolate.Language.LexerState,HotChocolate.Language.SyntaxToken)">
            <summary>
            Reads the token that comes after the
            <paramref name="previous"/>-token.
            </summary>
            <returns>
            Returns token that comes after the
            <paramref name="previous"/>-token.
            </returns>
            <param name="state">The lexer state.</param>
            <param name="previous">The previous-token.</param>
        </member>
        <member name="M:HotChocolate.Language.Lexer.ReadPunctuatorToken(HotChocolate.Language.LexerState,HotChocolate.Language.SyntaxToken,System.Char@)">
            <summary>
            Reads punctuator tokens as specified in
            http://facebook.github.io/graphql/October2016/#sec-Punctuators
            one of ! $ ( ) ... : = @ [ ] { | }
            additionaly the reader will tokenize ampersands.
            </summary>
            <param name="state">
            The lexer state.
            </param>
            <param name="previous">
            The previous-token.
            </param>
            <param name="firstCode">
            The first character of the punctuator.
            </param>
            <returns>
            Returns the punctuator token read from the current lexer state.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Lexer.ReadCommentToken(HotChocolate.Language.LexerState,HotChocolate.Language.SyntaxToken)">
            <summary>
            Reads comment tokens as specified in
            http://facebook.github.io/graphql/October2016/#sec-Comments
            #[\u0009\u0020-\uFFFF]*
            from the current lexer state.
            </summary>
            <param name="state">The lexer state.</param>
            <param name="previous">The previous-token.</param>
            <returns>
            Returns the comment token read from the current lexer state.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Lexer.ReadNameToken(HotChocolate.Language.LexerState,HotChocolate.Language.SyntaxToken)">
            <summary>
            Reads name tokens as specified in
            http://facebook.github.io/graphql/October2016/#Name
            [_A-Za-z][_0-9A-Za-z]
            from the current lexer state.
            </summary>
            <param name="state">The lexer state.</param>
            <param name="previous">The previous-token.</param>
            <returns>
            Returns the name token read from the current lexer state.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Lexer.ReadNumberToken(HotChocolate.Language.LexerState,HotChocolate.Language.SyntaxToken,System.Char@)">
            <summary>
            Reads int tokens as specified in
            http://facebook.github.io/graphql/October2016/#IntValue
            or a float tokens as specified in
            http://facebook.github.io/graphql/October2016/#FloatValue
            from the current lexer state.
            </summary>
            <param name="state">The lexer state.</param>
            <param name="previous">The previous-token.</param>
            <param name="firstCode">
            The first character of the int or float token.
            </param>
            <returns>
            Returns the int or float tokens read from the current lexer state.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Lexer.ReadBlockStringToken(HotChocolate.Language.LexerState,HotChocolate.Language.SyntaxToken)">
            <summary>
            Reads block string tokens as specified in
            http://facebook.github.io/graphql/draft/#BlockStringCharacter
            from the current lexer state.
            </summary>
            <param name="state">The lexer state.</param>
            <param name="previous">The previous-token.</param>
            <returns>
            Returns the block string token read from the current lexer state.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Lexer.TrimBlankLines(System.String[],System.String[])">
            <summary>
            Trims leading and trailing the blank lines.
            </summary>
            <returns>Returns the trimmed down lines.</returns>
        </member>
        <member name="M:HotChocolate.Language.Lexer.ReadStringValueToken(HotChocolate.Language.LexerState,HotChocolate.Language.SyntaxToken)">
            <summary>
            Reads string tokens as specified in
            http://facebook.github.io/graphql/October2016/#StringValue
            "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
            from the current lexer state.
            </summary>
            <param name="state">The lexer state.</param>
            <param name="previous">The previous-token.</param>
            <returns>
            Returns the string value token read from the current lexer state.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Lexer.SkipWhitespaces(HotChocolate.Language.LexerState)">
            <summary>
            Skips the whitespaces and moves the position
            to the next non whitespace character.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Lexer.Default">
            <summary>
            Gets the default instance of this lexer.
            </summary>
            <returns>
            Returns the default instancde of this lexer.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.LexerState">
            <summary>
            Represents the internal state of a lexer session.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.LexerState.Position">
            <summary>
            The current position of the lexer pointer.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.LexerState.Line">
            <summary>
            The number of the current line to which
            the lexer is currently pointing to.
            The line index is 1-based.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.LexerState.LineStart">
            <summary>
            The source index of where the current line starts.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.LexerState.Column">
            <summary>
            The column in the line where the lexer is currently pointing to.
            The column index is 1-based.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.LexerState.SourceText">
            <summary>
            The normalized GraphQL source text that is beeing tokenized.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.LexerState.NewLine">
            <summary>
            Sets the state to a new line.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.LexerState.NewLine(System.Int32)">
            <summary>
            Sets the state to a new line.
            </summary>
            <param name="lines">
            The number of lines to skip.
            </param>
        </member>
        <member name="M:HotChocolate.Language.LexerState.UpdateColumn">
            <summary>
            Updates the column index.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.LexerState.IsEndOfStream">
            <summary>
            Checks if the lexer source pointer has reached
            the end of the GraphQL source text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Language.LexerState.IsEndOfStream(System.Int32)">
            <summary>
            Checks if the lexer source pointer has reached
            the end of the GraphQL source text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseSchemaExtension(HotChocolate.Language.ParserContext)">
            <summary>
            Parse schema definition extension.
            <see cref="T:HotChocolate.Language.SchemaExtensionNode" />:
            * - extend schema Directives[Const]? { OperationTypeDefinition+ }
            * - extend schema Directives[Const]
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseFragment(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a fragment spred or inline fragment within a selection set.
            <see cref="M:HotChocolate.Language.Parser.ParseFragmentSpread(HotChocolate.Language.ParserContext,HotChocolate.Language.SyntaxToken)" /> and
            <see cref="M:HotChocolate.Language.Parser.ParseInlineFragment(HotChocolate.Language.ParserContext,HotChocolate.Language.SyntaxToken,HotChocolate.Language.NamedTypeNode)" />.
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseFragmentDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a fragment definition.
            <see cref="T:HotChocolate.Language.FragmentDefinitionNode" />:
            fragment FragmentName on TypeCondition Directives? SelectionSet
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseFragmentSpread(HotChocolate.Language.ParserContext,HotChocolate.Language.SyntaxToken)">
            <summary>
            Parses a fragment spread.
            <see cref="T:HotChocolate.Language.FragmentSpreadNode" />:
            ... FragmentName Directives?
            </summary>
            <param name="context">The parser context.</param>
            <param name="start">
            The start token of the current fragment node.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseInlineFragment(HotChocolate.Language.ParserContext,HotChocolate.Language.SyntaxToken,HotChocolate.Language.NamedTypeNode)">
            <summary>
            Parses an inline fragment.
            <see cref="T:HotChocolate.Language.FragmentSpreadNode" />:
            ... TypeCondition? Directives? SelectionSet
            </summary>
            <param name="context">The parser context.</param>
            <param name="start">
            The start token of the current fragment node.
            </param>
            <param name="typeCondition">
            The fragment type condition.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseFragmentName(HotChocolate.Language.ParserContext)">
            <summary>
            Parse fragment name.
            <see cref="T:HotChocolate.Language.NameNode" />:
            Name
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseOperationDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an operation definition.
            <see cref="T:HotChocolate.Language.OperationDefinitionNode" />:
            OperationType? OperationName? ($x : Type = DefaultValue?)? SelectionSet
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseOperationDefinitionShortHandForm(HotChocolate.Language.ParserContext,HotChocolate.Language.SyntaxToken)">
            <summary>
            Parses a short-hand form operation definition.
            <see cref="T:HotChocolate.Language.OperationDefinitionNode" />:
            SelectionSet
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseOperationType(HotChocolate.Language.ParserContext)">
            <summary>
            Parses the <see cref="T:HotChocolate.Language.OperationType" />.
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseVariableDefinitions(HotChocolate.Language.ParserContext)">
            <summary>
            Parses variable definitions.
            <see cref="T:System.Collections.Generic.IEnumerable`1" />:
            ( VariableDefinition+ )
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseVariableDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a variable definition.
            <see cref="T:HotChocolate.Language.VariableDefinitionNode" />:
            $variable : Type = DefaultValue?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseVariable(HotChocolate.Language.ParserContext)">
            <summary>
            Parse a variable.
            <see cref="T:HotChocolate.Language.VariableNode" />:
            $Name
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseSelectionSet(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a selection set.
            <see cref="T:HotChocolate.Language.SelectionSetNode" />:
            { Selection+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseSelection(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a selection.
            <see cref="T:HotChocolate.Language.ISelectionNode" />:
            - Field
            - FragmentSpread
            - InlineFragment
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseField(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a field.
            <see cref="T:HotChocolate.Language.FieldNode"  />:
            Alias? : Name Arguments? Directives? SelectionSet?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseArguments(HotChocolate.Language.ParserContext,System.Boolean)">
            <summary>
            Parses a collection of arguments.
            <see cref="T:System.Collections.Generic.IReadOnlyList`1" />:
            ( Argument[isConstant]+ )
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseArguments(HotChocolate.Language.ParserContext,System.Func{HotChocolate.Language.ParserContext,HotChocolate.Language.ArgumentNode})">
            <summary>
            Parses an argument.
            <see cref="T:HotChocolate.Language.ArgumentNode" />:
            Name : Value[isConstant]
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseConstantArgument(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an argument.
            <see cref="T:HotChocolate.Language.ArgumentNode" />:
            Name : Value[isConstant=true]
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseArgument(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an argument.
            <see cref="T:HotChocolate.Language.ArgumentNode" />:
            Name : Value[isConstant=false]
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseArgument(HotChocolate.Language.ParserContext,System.Func{HotChocolate.Language.ParserContext,HotChocolate.Language.IValueNode})">
            <summary>
            Parses an argument.
            <see cref="T:HotChocolate.Language.ArgumentNode" />:
            Name : Value
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseTypeSystemDefinition(HotChocolate.Language.ParserContext)">
             <summary>
             Parses a type definition.
             <see cref="T:HotChocolate.Language.ITypeSystemDefinitionNode" />:
             TypeSystemDefinition:
             - SchemaDefinition
             - TypeDefinition
             - TypeExtension
             - DirectiveDefinition
            
             TypeDefinition:
             - ScalarTypeDefinition
             - ObjectTypeDefinition
             - InterfaceTypeDefinition
             - UnionTypeDefinition
             - EnumTypeDefinition
             - InputObjectTypeDefinition
             </summary>
             <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseDescription(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a description.
            <see cref="T:HotChocolate.Language.StringValueNode" />:
            StringValue
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseSchemaDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a schema definition.
            <see cref="T:HotChocolate.Language.SchemaDefinitionNode" />:
            schema Directives[isConstant:true]? { OperationTypeDefinition+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseOperationTypeDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an operation type definition.
            <see cref="T:HotChocolate.Language.OperationTypeDefinitionNode" />:
            OperationType : NamedType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseScalarTypeDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a scalar type definition.
            <see cref="T:HotChocolate.Language.ScalarTypeDefinitionNode" />:
            Description?
            scalar Name Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseObjectTypeDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an object type definition.
            <see cref="T:HotChocolate.Language.ObjectTypeDefinitionNode" />:
            Description?
            type Name ImplementsInterfaces? Directives[isConstant=true]? FieldsDefinition?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseImplementsInterfaces(HotChocolate.Language.ParserContext)">
            <summary>
            Parses implementing interfaces.
            <see cref="T:System.Collections.Generic.List`1" />:
            implements &amp;? NamedType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseFieldsDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses field definitions of an interface type or object type
            <see cref="T:System.Collections.Generic.IReadOnlyList`1" />:
            { FieldDefinition+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseFieldDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a interface type or object type field definition.
            <see cref="T:HotChocolate.Language.FieldDefinitionNode" />:
            Description?
            Name ArgumentsDefinition? : Type Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseArgumentDefinitions(HotChocolate.Language.ParserContext)">
            <summary>
            Parses field arguments.
            <see cref="T:System.Collections.Generic.List`1" />:
            ( InputValueDefinition+ )
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseInputValueDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses input value definitions.
            <see cref="T:HotChocolate.Language.InputValueDefinitionNode" />:
            Description? Name : Type DefaultValue? Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseInterfaceTypeDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an interface type definition.
            <see cref="!:InterfaceTypeDefinition" />:
            Description? interface Name Directives[isConstant=true]?
            FieldsDefinition?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseUnionTypeDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an union type definition.
            <see cref="T:HotChocolate.Language.UnionTypeDefinitionNode" />:
            Description? union Name Directives[isConstant=true]?
            UnionMemberTypes?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseUnionMemberTypes(HotChocolate.Language.ParserContext)">
            <summary>
            Parses the union member types.
            <see cref="T:System.Collections.Generic.List`1" />:
            = `|`? NamedType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseEnumTypeDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an enum type definition.
            <see cref="T:HotChocolate.Language.EnumTypeDefinitionNode" />:
            Description? enum Name Directives[Const]? EnumValuesDefinition?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseEnumValuesDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses the value definitions of an enum type definition.
            <see cref="T:System.Collections.Generic.List`1" />:
            { EnumValueDefinition+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseEnumValueDefinition(HotChocolate.Language.ParserContext)">
            <summary>
            Parses an enum value definitions.
            <see cref="T:HotChocolate.Language.EnumValueDefinitionNode" />:
            Description? EnumValue Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseTypeReference(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a type reference.
            <see cref="T:HotChocolate.Language.ITypeNode" />:
            - NamedType
            - ListType
            - NonNullType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseNamedType(HotChocolate.Language.ParserContext)">
            <summary>
            Parses a named type.
            <see cref="T:HotChocolate.Language.NamedTypeNode" />:
            Name
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseValueLiteral(HotChocolate.Language.ParserContext,System.Boolean)">
            <summary>
            Parses a value.
            <see cref="T:HotChocolate.Language.IValueNode" />:
            - Variable [only if isConstant is <c>false</c>]
            - IntValue
            - FloatValue
            - StringValue
            - BooleanValue
            - NullValue
            - EnumValue
            - ListValue[isConstant]
            - ObjectValue[isConstant]
            <see cref="T:HotChocolate.Language.BooleanValueNode" />: true or false.
            <see cref="T:HotChocolate.Language.NullValueNode" />: null
            <see cref="T:HotChocolate.Language.EnumValueNode" />: Name but not true, false or null.
            </summary>
            <param name="context">The parser context.</param>
            <param name="isConstant">
            Defines if only constant values are allowed;
            otherwise, variables are allowed.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseList(HotChocolate.Language.ParserContext,System.Boolean)">
            <summary>
            Parses a list value.
            <see cref="T:HotChocolate.Language.ListValueNode" />:
            - [ ]
            - [ Value[isConstant]+ ]
            </summary>
            <param name="context">The parser context.</param>
            <param name="isConstant">
            Defines if only constant values are allowed;
            otherwise, variables are allowed.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Parser.ParseObject(HotChocolate.Language.ParserContext,System.Boolean)">
            <summary>
            Parses an object value.
            <see cref="T:HotChocolate.Language.ObjectValueNode" />:
            - { }
            - { Value[isConstant]+ }
            </summary>
            <param name="context">The parser context.</param>
            <param name="isConstant">
            Defines if only constant values are allowed;
            otherwise, variables are allowed.
            </param>
        </member>
        <member name="P:HotChocolate.Language.ParserOptions.NoLocations">
            <summary>
            By default, the parser creates <see cref="T:HotChocolate.Language.ISyntaxNode" />s
            that know the location in the source that they correspond to.
            This configuration flag disables that behavior
            for performance or testing.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ParserOptions.Experimental">
            <summary>
            Gets the experimental parser options
            which are by default switched of.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.ParserOptionsExperimental">
            <summary>
            Represents the experimental parser options.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.ParserOptionsExperimental.AllowFragmentVariables">
            <summary>
            If enabled, the parser will understand and parse variable 
            definitions contained in a fragment definition.They'll be 
            represented in the `variableDefinitions` field of the 
            FragmentDefinitionNode.
            
            The syntax is identical to normal, query-defined variables. 
            For example:
            
            fragment A($var: Boolean = false) on T
            {
               ...
            }
            
            Note: this feature is experimental and may change or be 
            removed in the future.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.Source">
            <summary>
            Represents a GraphQL source.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Source.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.Source"/> class.
            </summary>
            <param name="text">
            The GraphQL source text.
            </param>
        </member>
        <member name="P:HotChocolate.Language.Source.Text">
            <summary>
            Gets the GraphQL source text.
            </summary>
            <returns>
            Returns the GraphQL source text.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with the current
            <see cref="T:HotChocolate.Language.Source"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.Equals(HotChocolate.Language.Source)">
            <summary>
            Determines whether the specified <see cref="T:HotChocolate.Language.Source"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>.
            </summary>
            <param name="other">
            The <see cref="T:HotChocolate.Language.Source"/> to compare with the current
            <see cref="T:HotChocolate.Language.Source"/>.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:HotChocolate.Language.Source"/> is equal
            to the current <see cref="T:HotChocolate.Language.Source"/>;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.GetHashCode">
            <summary>
            Serves as a hash function for a
            <see cref="T:HotChocolate.Language.Source"/> object.
            </summary>
            <returns>A hash code for this instance that is suitable
            for use in hashing algorithms and data structures such as a
            hash table.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents
            the current <see cref="T:HotChocolate.Language.Source"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current
            <see cref="T:HotChocolate.Language.Source"/>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.FromFile(System.String)">
            <summary>
            Reads a GraphQL source from a file.
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Language.Source"/> consisting of the file content.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.FromFile(System.IO.FileInfo)">
            <summary>
            Reads a GraphQL source from a file.
            </summary>
            <param name="file">
            The GraphQL source file.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Language.Source"/> consisting of the file content.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Source.FromStream(System.IO.Stream)">
            <summary>
            Reads a GraphQL source from a read stream.
            </summary>
            <param name="stream">
            A read stream that provides access to a GraphQL source text.
            </param>
            <returns>
            Returns a <see cref="T:HotChocolate.Language.Source"/> consisting of the streams content.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.SyntaxToken">
            <summary>
            Represents a GraphQL syntax token.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SyntaxToken.#ctor(HotChocolate.Language.TokenKind,System.Int32,System.Int32,System.Int32,System.Int32,HotChocolate.Language.SyntaxToken)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.Token"/> class.
            </summary>
            <param name="kind">
            The token kind.
            </param>
            <param name="start">
            The start index of this token.
            </param>
            <param name="end">
            The end index of this token.
            </param>
            <param name="line">
            The 1-base line index in which this token is located.
            </param>
            <param name="column">
            The 1-base column index in which this token is located.
            </param>
            <param name="previous">
            The token that came before this token.
            </param>
        </member>
        <member name="M:HotChocolate.Language.SyntaxToken.#ctor(HotChocolate.Language.TokenKind,System.Int32,System.Int32,System.Int32,System.Int32,System.String,HotChocolate.Language.SyntaxToken)">
            <summary>
            Initializes a new instance of the
            <see cref="T:HotChocolate.Language.Token"/> class.
            </summary>
            <param name="kind">
            The token kind.
            </param>
            <param name="start">
            The start index of this token.
            </param>
            <param name="end">
            The end index of this token.
            </param>
            <param name="line">
            The 1-base line index in which this token is located.
            </param>
            <param name="column">
            The 1-base column index in which this token is located.
            </param>
            <param name="value">
            The token value.
            </param>
            <param name="previous">
            The token that came before this token.
            </param>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.Kind">
            <summary>
            Gets the kind of <see cref="T:HotChocolate.Language.SyntaxToken" />.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.Start">
            <summary>
            Gets the character offset at which this node begins.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.End">
            <summary>
            Gets the character offset at which this node ends.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.Line">
            <summary>
            Gets the 1-indexed line number on which this 
            <see cref="T:HotChocolate.Language.SyntaxToken" /> appears.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.Column">
            <summary>
            Gets the 1-indexed column number at which this 
            <see cref="T:HotChocolate.Language.SyntaxToken" /> begins.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.Value">
            <summary>
            For non-punctuation tokens, represents the interpreted 
            value of the token.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.Previous">
            <summary>
            Gets the token that came before this token.
            If this token is a
            <see cref="F:HotChocolate.Language.TokenKind.StartOfFile"/>-token than
            this property will return <c>null</c>.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.SyntaxToken.Next">
            <summary>
            Gets the token that comes after this token.
            If this token is a
            <see cref="F:HotChocolate.Language.TokenKind.EndOfFile"/>-token than
            this property will return <c>null</c>.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.SyntaxToken.ToString">
            <summary>
            Returns a <see cref="T:System.String"/>
            that represents the current
            <see cref="T:HotChocolate.Language.Token"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/>
            that represents the current
            <see cref="T:HotChocolate.Language.Token"/>.
            </returns>
        </member>
        <member name="T:HotChocolate.Language.TokenKind">
            <summary>
            Represents the token kinds.
            </summary>
        </member>
        <member name="F:HotChocolate.Language.TokenKind.StartOfFile">
            <summary>
            The start of file token.
            </summary>
        </member>
        <member name="F:HotChocolate.Language.TokenKind.EndOfFile">
            <summary>
            The end of file token.
            </summary>
        </member>
        <member name="F:HotChocolate.Language.TokenKind.Bang">
            <summary>
            The bang token is used to specify
            non null types and is represented by:
            '!'.
            </summary>
        </member>
        <member name="F:HotChocolate.Language.TokenKind.Dollar">
            <summary>
            The dollar token is used to specify variables
            and variable declarations and is represented by:
            '$'.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.GraphQLConstants">
            <summary>
            This class provides internal char utilities
            that are used to tokenize a GraphQL source text.
            These utilities are used by the lexer default implementation.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseSchemaExtension(HotChocolate.Language.Utf8GraphQLParser.TokenInfo@)">
            <summary>
            Parse schema definition extension.
            <see cref="T:HotChocolate.Language.SchemaExtensionNode" />:
            * - extend schema Directives[Const]? { OperationTypeDefinition+ }
            * - extend schema Directives[Const]
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseFragment">
            <summary>
            Parses a fragment spred or inline fragment within a selection set.
            <see cref="M:HotChocolate.Language.Utf8GraphQLParser.ParseFragmentSpread(HotChocolate.Language.Utf8GraphQLParser.TokenInfo@)" /> and
            <see cref="M:HotChocolate.Language.Utf8GraphQLParser.ParseInlineFragment(HotChocolate.Language.Utf8GraphQLParser.TokenInfo@,HotChocolate.Language.NamedTypeNode)" />.
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseFragmentDefinition">
            <summary>
            Parses a fragment definition.
            <see cref="T:HotChocolate.Language.FragmentDefinitionNode" />:
            fragment FragmentName on TypeCondition Directives? SelectionSet
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseFragmentSpread(HotChocolate.Language.Utf8GraphQLParser.TokenInfo@)">
            <summary>
            Parses a fragment spread.
            <see cref="T:HotChocolate.Language.FragmentSpreadNode" />:
            ... FragmentName Directives?
            </summary>
            <param name="context">The parser context.</param>
            <param name="start">
            The start token of the current fragment node.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseInlineFragment(HotChocolate.Language.Utf8GraphQLParser.TokenInfo@,HotChocolate.Language.NamedTypeNode)">
            <summary>
            Parses an inline fragment.
            <see cref="T:HotChocolate.Language.FragmentSpreadNode" />:
            ... TypeCondition? Directives? SelectionSet
            </summary>
            <param name="context">The parser context.</param>
            <param name="start">
            The start token of the current fragment node.
            </param>
            <param name="typeCondition">
            The fragment type condition.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseFragmentName">
            <summary>
            Parse fragment name.
            <see cref="T:HotChocolate.Language.NameNode" />:
            Name
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseOperationDefinition">
            <summary>
            Parses an operation definition.
            <see cref="T:HotChocolate.Language.OperationDefinitionNode" />:
            OperationType? OperationName? ($x : Type = DefaultValue?)? SelectionSet
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseShortOperationDefinition">
            <summary>
            Parses a short-hand form operation definition.
            <see cref="T:HotChocolate.Language.OperationDefinitionNode" />:
            SelectionSet
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseOperationType">
            <summary>
            Parses the <see cref="T:HotChocolate.Language.OperationType" />.
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseVariableDefinitions">
            <summary>
            Parses variable definitions.
            <see cref="T:System.Collections.Generic.IEnumerable`1" />:
            ( VariableDefinition+ )
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseVariableDefinition">
            <summary>
            Parses a variable definition.
            <see cref="T:HotChocolate.Language.VariableDefinitionNode" />:
            $variable : Type = DefaultValue?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseVariable">
            <summary>
            Parse a variable.
            <see cref="T:HotChocolate.Language.VariableNode" />:
            $Name
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseSelectionSet">
            <summary>
            Parses a selection set.
            <see cref="T:HotChocolate.Language.SelectionSetNode" />:
            { Selection+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseSelection">
            <summary>
            Parses a selection.
            <see cref="T:HotChocolate.Language.ISelectionNode" />:
            - Field
            - FragmentSpread
            - InlineFragment
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseField">
            <summary>
            Parses a field.
            <see cref="T:HotChocolate.Language.FieldNode"  />:
            Alias? : Name Arguments? Directives? SelectionSet?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseArguments(System.Boolean)">
            <summary>
            Parses an argument.
            <see cref="T:HotChocolate.Language.ArgumentNode" />:
            Name : Value[isConstant]
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseArgument(System.Boolean)">
            <summary>
            Parses an argument.
            <see cref="T:HotChocolate.Language.ArgumentNode" />:
            Name : Value[isConstant]
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLParser.TokenInfo.Start">
            <summary>
            Gets the character offset at which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> begins.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLParser.TokenInfo.End">
            <summary>
            Gets the character offset at which this
            <see cref="T:HotChocolate.Language.ISyntaxNode" /> ends.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLParser.TokenInfo.Line">
            <summary>
            Gets the 1-indexed line number on which this
            <see cref="T:HotChocolate.Language.SyntaxToken" /> appears.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLParser.TokenInfo.Column">
            <summary>
            Gets the 1-indexed column number at which this
            <see cref="T:HotChocolate.Language.SyntaxToken" /> begins.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseDescription">
            <summary>
            Parses a description.
            <see cref="T:HotChocolate.Language.StringValueNode" />:
            StringValue
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseSchemaDefinition">
            <summary>
            Parses a schema definition.
            <see cref="T:HotChocolate.Language.SchemaDefinitionNode" />:
            schema Directives[isConstant:true]? { OperationTypeDefinition+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseOperationTypeDefinition">
            <summary>
            Parses an operation type definition.
            <see cref="T:HotChocolate.Language.OperationTypeDefinitionNode" />:
            OperationType : NamedType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseScalarTypeDefinition">
            <summary>
            Parses a scalar type definition.
            <see cref="T:HotChocolate.Language.ScalarTypeDefinitionNode" />:
            Description?
            scalar Name Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseObjectTypeDefinition">
            <summary>
            Parses an object type definition.
            <see cref="T:HotChocolate.Language.ObjectTypeDefinitionNode" />:
            Description?
            type Name ImplementsInterfaces? Directives[isConstant=true]? FieldsDefinition?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseImplementsInterfaces">
            <summary>
            Parses implementing interfaces.
            <see cref="T:System.Collections.Generic.List`1" />:
            implements &amp;? NamedType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseFieldsDefinition">
            <summary>
            Parses field definitions of an interface type or object type
            <see cref="T:System.Collections.Generic.IReadOnlyList`1" />:
            { FieldDefinition+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseFieldDefinition">
            <summary>
            Parses a interface type or object type field definition.
            <see cref="T:HotChocolate.Language.FieldDefinitionNode" />:
            Description?
            Name ArgumentsDefinition? : Type Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseArgumentDefinitions">
            <summary>
            Parses field arguments.
            <see cref="T:System.Collections.Generic.List`1" />:
            ( InputValueDefinition+ )
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseInputValueDefinition">
            <summary>
            Parses input value definitions.
            <see cref="T:HotChocolate.Language.InputValueDefinitionNode" />:
            Description? Name : Type DefaultValue? Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseInterfaceTypeDefinition">
            <summary>
            Parses an interface type definition.
            <see cref="!:InterfaceTypeDefinition" />:
            Description? interface Name Directives[isConstant=true]?
            FieldsDefinition?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseUnionTypeDefinition">
            <summary>
            Parses an union type definition.
            <see cref="T:HotChocolate.Language.UnionTypeDefinitionNode" />:
            Description? union Name Directives[isConstant=true]?
            UnionMemberTypes?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseUnionMemberTypes">
            <summary>
            Parses the union member types.
            <see cref="T:System.Collections.Generic.List`1" />:
            = `|`? NamedType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseEnumTypeDefinition">
            <summary>
            Parses an enum type definition.
            <see cref="T:HotChocolate.Language.EnumTypeDefinitionNode" />:
            Description? enum Name Directives[Const]? EnumValuesDefinition?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseEnumValuesDefinition">
            <summary>
            Parses the value definitions of an enum type definition.
            <see cref="T:System.Collections.Generic.List`1" />:
            { EnumValueDefinition+ }
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseEnumValueDefinition">
            <summary>
            Parses an enum value definitions.
            <see cref="T:HotChocolate.Language.EnumValueDefinitionNode" />:
            Description? EnumValue Directives[isConstant=true]?
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseTypeReference">
            <summary>
            Parses a type reference.
            <see cref="T:HotChocolate.Language.ITypeNode" />:
            - NamedType
            - ListType
            - NonNullType
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseNamedType">
            <summary>
            Parses a named type.
            <see cref="T:HotChocolate.Language.NamedTypeNode" />:
            Name
            </summary>
            <param name="context">The parser context.</param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseValueLiteral(System.Boolean)">
            <summary>
            Parses a value.
            <see cref="T:HotChocolate.Language.IValueNode" />:
            - Variable [only if isConstant is <c>false</c>]
            - IntValue
            - FloatValue
            - StringValue
            - BooleanValue
            - NullValue
            - EnumValue
            - ListValue[isConstant]
            - ObjectValue[isConstant]
            <see cref="T:HotChocolate.Language.BooleanValueNode" />: true or false.
            <see cref="T:HotChocolate.Language.NullValueNode" />: null
            <see cref="T:HotChocolate.Language.EnumValueNode" />: Name but not true, false or null.
            </summary>
            <param name="context">The parser context.</param>
            <param name="isConstant">
            Defines if only constant values are allowed;
            otherwise, variables are allowed.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseList(System.Boolean)">
            <summary>
            Parses a list value.
            <see cref="T:HotChocolate.Language.ListValueNode" />:
            - [ ]
            - [ Value[isConstant]+ ]
            </summary>
            <param name="context">The parser context.</param>
            <param name="isConstant">
            Defines if only constant values are allowed;
            otherwise, variables are allowed.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLParser.ParseObject(System.Boolean)">
            <summary>
            Parses an object value.
            <see cref="T:HotChocolate.Language.ObjectValueNode" />:
            - { }
            - { Value[isConstant]+ }
            </summary>
            <param name="context">The parser context.</param>
            <param name="isConstant">
            Defines if only constant values are allowed;
            otherwise, variables are allowed.
            </param>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.Kind">
            <summary>
            Gets the kind of <see cref="T:HotChocolate.Language.SyntaxToken" />.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.Start">
            <summary>
            Gets the character offset at which this node begins.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.End">
            <summary>
            Gets the character offset at which this node ends.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.Position">
            <summary>
            The current position of the lexer pointer.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.Line">
            <summary>
            Gets the 1-indexed line number on which this
            <see cref="T:HotChocolate.Language.SyntaxToken" /> appears.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.LineStart">
            <summary>
            The source index of where the current line starts.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.Column">
            <summary>
            Gets the 1-indexed column number at which this
            <see cref="T:HotChocolate.Language.SyntaxToken" /> begins.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Utf8GraphQLReader.Value">
            <summary>
            For non-punctuation tokens, represents the interpreted
            value of the token.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.ReadNameToken">
            <summary>
            Reads name tokens as specified in
            http://facebook.github.io/graphql/October2016/#Name
            [_A-Za-z][_0-9A-Za-z]
            from the current lexer state.
            </summary>
            <param name="state">The lexer state.</param>
            <param name="previous">The previous-token.</param>
            <returns>
            Returns the name token read from the current lexer state.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.ReadPunctuatorToken(System.Byte)">
            <summary>
            Reads punctuator tokens as specified in
            http://facebook.github.io/graphql/October2016/#sec-Punctuators
            one of ! $ ( ) ... : = @ [ ] { | }
            additionaly the reader will tokenize ampersands.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.ReadNumberToken(System.Byte)">
            <summary>
            Reads int tokens as specified in
            http://facebook.github.io/graphql/October2016/#IntValue
            or a float tokens as specified in
            http://facebook.github.io/graphql/October2016/#FloatValue
            from the current lexer state.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.ReadCommentToken">
            <summary>
            Reads comment tokens as specified in
            http://facebook.github.io/graphql/October2016/#sec-Comments
            #[\u0009\u0020-\uFFFF]*
            from the current lexer state.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.ReadStringValueToken">
            <summary>
            Reads string tokens as specified in
            http://facebook.github.io/graphql/October2016/#StringValue
            "([^"\\\u000A\u000D]|(\\(u[0-9a-fA-F]{4}|["\\/bfnrt])))*"
            from the current lexer state.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.ReadBlockStringToken">
            <summary>
            Reads block string tokens as specified in
            http://facebook.github.io/graphql/draft/#BlockStringCharacter
            from the current lexer state.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.NewLine">
            <summary>
            Sets the state to a new line.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.NewLine(System.Int32)">
            <summary>
            Sets the state to a new line.
            </summary>
            <param name="lines">
            The number of lines to skip.
            </param>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.UpdateColumn">
            <summary>
            Updates the column index.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.Utf8GraphQLReader.IsEndOfStream">
            <summary>
            Checks if the lexer source pointer has reached
            the end of the GraphQL source text.
            </summary>
        </member>
        <member name="T:HotChocolate.Language.Properties.LangResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.GraphQLData_Empty">
            <summary>
              Looks up a localized string similar to The graphQLData mustn&apos;t be empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.ParseMany_InvalidOpenToken">
            <summary>
              Looks up a localized string similar to Expected a {0} token but found `{1}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.Parser_InvalidScalarToken">
            <summary>
              Looks up a localized string similar to Expected a `Int`-, `Float`-, `String`- or `BlockString`-token, but found a `{0}`-token..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.Parser_InvalidToken">
            <summary>
              Looks up a localized string similar to Expected a `{0}`-token, but found a `{1}`-token..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.QuerySyntaxRewriter_NotSupported">
            <summary>
              Looks up a localized string similar to The given syntax node is not supported by this rewriter..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.Reader_InvalidToken">
            <summary>
              Looks up a localized string similar to Expected a `{0}`-token..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.Reader_UnexpectedPunctuatorToken">
            <summary>
              Looks up a localized string similar to Unexpected punctuator token `{0}`..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.SourceText_Empty">
            <summary>
              Looks up a localized string similar to The source text mustn&apos;t be null or empty..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.Utf8Helper_InvalidEscapeChar">
            <summary>
              Looks up a localized string similar to The escape char `{0}` is invalid..
            </summary>
        </member>
        <member name="P:HotChocolate.Language.Properties.LangResources.Utf8Helper_InvalidQuoteEscapeCount">
            <summary>
              Looks up a localized string similar to The quote escape string has to consist of three quotes `\&quot;&quot;&quot;`..
            </summary>
        </member>
        <member name="T:HotChocolate.Language.NameUtils">
            <summary>
            Helper methods to handle GrahQL names.
            </summary>
        </member>
        <member name="M:HotChocolate.Language.NameUtils.IsValidGraphQLName(System.String)">
            <summary>
            Checks if the provided name is a valid GraphQL type or field name.
            </summary>
            <param name="name">
            The name that shall be checked.
            </param>
            <returns>
            <c>true</c>, if the name is a valid GraphQL name;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:HotChocolate.Language.NameUtils.MakeValidGraphQLName(System.String)">
            <summary>
            Takes the provided name and replaces invalid
            charactes with an underscore.
            </summary>
            <param name="name">
            A name that shall be made a value GraphQL name.
            </param>
            <returns>Returns a valid GraphQL name.</returns>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNodeVisitor`1.Enter(`0,HotChocolate.Language.ISyntaxNode,System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISyntaxNode})">
            <summary>
            Enter is called when the visitation method hit the node and
            is aboute to visit its subtree.
            </summary>
            <param name="node">
            The current node being visited.
            </param>
            <param name="parent">
            The parent immediately above this node, which may be an Array.
            </param>
            <param name="path">
            The index or key to this node from the parent node or Array.
            </param>
            <param name="ancestors">
            All nodes and Arrays visited before reaching parent of this node.
            These correspond to array indices in `path`.
            Note: ancestors includes arrays which contain the parent
            of visited node.
            </param>
        </member>
        <member name="M:HotChocolate.Language.ISyntaxNodeVisitor`1.Leave(`0,HotChocolate.Language.ISyntaxNode,System.Collections.Generic.IReadOnlyList{System.Object},System.Collections.Generic.IReadOnlyList{HotChocolate.Language.ISyntaxNode})">
            <summary>
            Leave is called when the visitation method is about to leave
            this node the full subtree if this node was visited
            when this method is called.
            </summary>
            <param name="node">
            The current node being visited.
            </param>
            <param name="parent">
            The parent immediately above this node, which may be an Array.
            </param>
            <param name="path">
            The index or key to this node from the parent node or Array.
            </param>
            <param name="ancestors">
            All nodes and Arrays visited before reaching parent of this node.
            These correspond to array indices in `path`.
            Note: ancestors includes arrays which contain
            the parent of visited node.
            </param>
        </member>
    </members>
</doc>
